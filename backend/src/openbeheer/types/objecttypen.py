# generated by datamodel-codegen:
#   filename:  http://localhost:8004/api/v2/schema/openapi.yaml
#   timestamp: 2025-09-11T10:49:08+00:00
#   version:   0.30.1

from __future__ import annotations

from datetime import date  # noqa: TC003
from enum import Enum
from typing import Annotated, Any, List

from msgspec import Meta, Struct, field


class DataClassificationEnum(Enum):
    open = "open"
    intern = "intern"
    confidential = "confidential"
    strictly_confidential = "strictly_confidential"


class StatusEnum(Enum):
    published = "published"
    draft = "draft"
    deprecated = "deprecated"


class UpdateFrequencyEnum(Enum):
    real_time = "real_time"
    hourly = "hourly"
    daily = "daily"
    weekly = "weekly"
    monthly = "monthly"
    yearly = "yearly"
    unknown = "unknown"


class DataClassification(Enum):
    confidential = "confidential"
    intern = "intern"
    open = "open"
    strictly_confidential = "strictly_confidential"


class ObjecttypesGetParametersQuery(Struct, kw_only=True):
    data_classification: DataClassification | None = field(
        name="dataClassification", default=None
    )
    page: int | None = None
    page_size: int | None = field(name="pageSize", default=None)


class ObjecttypesObjecttypeUuidVersionsGetParametersQuery(Struct, kw_only=True):
    page: int | None = None
    page_size: int | None = field(name="pageSize", default=None)


class ObjectType(Struct, kw_only=True):
    name: Annotated[str, Meta(description="Name of the object type", max_length=100)]
    name_plural: Annotated[
        str, Meta(description="Plural name of the object type", max_length=100)
    ] = field(name="namePlural")
    url: (
        Annotated[
            str,
            Meta(
                description="URL reference to this object. This is the unique identification and location of this object.",
                max_length=1000,
                min_length=1,
            ),
        ]
        | None
    ) = None
    uuid: Annotated[str, Meta(description="Unique identifier (UUID4)")] | None = None
    description: (
        Annotated[
            str, Meta(description="The description of the object type", max_length=1000)
        ]
        | None
    ) = None
    data_classification: (
        Annotated[
            DataClassificationEnum,
            Meta(
                description="Confidential level of the object type\n\n* `open` - Open\n* `intern` - Intern\n* `confidential` - Confidential\n* `strictly_confidential` - Strictly confidential"
            ),
        ]
        | None
    ) = field(name="dataClassification", default=None)
    maintainer_organization: (
        Annotated[
            str,
            Meta(
                description="Organization which is responsible for the object type",
                max_length=200,
            ),
        ]
        | None
    ) = field(name="maintainerOrganization", default=None)
    maintainer_department: (
        Annotated[
            str,
            Meta(
                description="Business department which is responsible for the object type",
                max_length=200,
            ),
        ]
        | None
    ) = field(name="maintainerDepartment", default=None)
    contact_person: (
        Annotated[
            str,
            Meta(
                description="Name of the person in the organization who can provide information about the object type",
                max_length=200,
            ),
        ]
        | None
    ) = field(name="contactPerson", default=None)
    contact_email: (
        Annotated[
            str,
            Meta(
                description="Email of the person in the organization who can provide information about the object type",
                max_length=200,
            ),
        ]
        | None
    ) = field(name="contactEmail", default=None)
    source: (
        Annotated[
            str,
            Meta(
                description="Name of the system from which the object type originates",
                max_length=200,
            ),
        ]
        | None
    ) = None
    update_frequency: (
        Annotated[
            UpdateFrequencyEnum,
            Meta(
                description="Indicates how often the object type is updated\n\n* `real_time` - Real-time\n* `hourly` - Hourly\n* `daily` - Daily\n* `weekly` - Weekly\n* `monthly` - Monthly\n* `yearly` - Yearly\n* `unknown` - Unknown"
            ),
        ]
        | None
    ) = field(name="updateFrequency", default=None)
    provider_organization: (
        Annotated[
            str,
            Meta(
                description="Organization which is responsible for publication of the object type",
                max_length=200,
            ),
        ]
        | None
    ) = field(name="providerOrganization", default=None)
    documentation_url: (
        Annotated[
            str,
            Meta(
                description="Link to the documentation for the object type",
                max_length=200,
            ),
        ]
        | None
    ) = field(name="documentationUrl", default=None)
    labels: (
        Annotated[
            dict[str, str | int | dict],
            Meta(description="Key-value pairs of keywords related for the object type"),
        ]
        | None
    ) = None
    created_at: (
        Annotated[date, Meta(description="Date when the object type was created")]
        | None
    ) = field(name="createdAt", default=None)
    modified_at: (
        Annotated[date, Meta(description="Last date when the object type was modified")]
        | None
    ) = field(name="modifiedAt", default=None)
    allow_geometry: (
        Annotated[
            bool,
            Meta(
                description="Shows whether the related objects can have geographic coordinates. If the value is 'false' the related objects are not allowed to have coordinates and the creation/update of objects with `geometry` property will raise an error "
            ),
        ]
        | None
    ) = field(name="allowGeometry", default=None)
    versions: (
        Annotated[
            List[str], Meta(description="list of URLs for the OBJECTTYPE versions")
        ]
        | None
    ) = None


class ObjectVersion(Struct, kw_only=True):
    url: str | None = None
    version: (
        Annotated[int, Meta(description="Integer version of the OBJECTTYPE")] | None
    ) = None
    object_type: str | None = field(name="objectType", default=None)
    status: (
        Annotated[
            StatusEnum,
            Meta(
                description="Status of the object type version\n\n* `published` - Published\n* `draft` - Draft\n* `deprecated` - Deprecated"
            ),
        ]
        | None
    ) = None
    json_schema: (
        Annotated[
            Any,
            Meta(description="JSON schema for Object validation", title="JSON schema"),
        ]
        | None
    ) = field(name="jsonSchema", default=None)
    created_at: (
        Annotated[date, Meta(description="Date when the version was created")] | None
    ) = field(name="createdAt", default=None)
    modified_at: (
        Annotated[date, Meta(description="Last date when the version was modified")]
        | None
    ) = field(name="modifiedAt", default=None)
    published_at: (
        Annotated[
            date,
            Meta(
                description="Date when the version was published", title="Published_at"
            ),
        ]
        | None
    ) = field(name="publishedAt", default=None)


class PaginatedObjectTypeList(Struct, kw_only=True):
    count: int
    results: List[ObjectType]
    next: str | None = None
    previous: str | None = None


class PaginatedObjectVersionList(Struct, kw_only=True):
    count: int
    results: List[ObjectVersion]
    next: str | None = None
    previous: str | None = None


class PatchedObjectType(Struct, kw_only=True):
    url: (
        Annotated[
            str,
            Meta(
                description="URL reference to this object. This is the unique identification and location of this object.",
                max_length=1000,
                min_length=1,
            ),
        ]
        | None
    ) = None
    uuid: Annotated[str, Meta(description="Unique identifier (UUID4)")] | None = None
    name: (
        Annotated[str, Meta(description="Name of the object type", max_length=100)]
        | None
    ) = None
    name_plural: (
        Annotated[
            str, Meta(description="Plural name of the object type", max_length=100)
        ]
        | None
    ) = field(name="namePlural", default=None)
    description: (
        Annotated[
            str, Meta(description="The description of the object type", max_length=1000)
        ]
        | None
    ) = None
    data_classification: (
        Annotated[
            DataClassificationEnum,
            Meta(
                description="Confidential level of the object type\n\n* `open` - Open\n* `intern` - Intern\n* `confidential` - Confidential\n* `strictly_confidential` - Strictly confidential"
            ),
        ]
        | None
    ) = field(name="dataClassification", default=None)
    maintainer_organization: (
        Annotated[
            str,
            Meta(
                description="Organization which is responsible for the object type",
                max_length=200,
            ),
        ]
        | None
    ) = field(name="maintainerOrganization", default=None)
    maintainer_department: (
        Annotated[
            str,
            Meta(
                description="Business department which is responsible for the object type",
                max_length=200,
            ),
        ]
        | None
    ) = field(name="maintainerDepartment", default=None)
    contact_person: (
        Annotated[
            str,
            Meta(
                description="Name of the person in the organization who can provide information about the object type",
                max_length=200,
            ),
        ]
        | None
    ) = field(name="contactPerson", default=None)
    contact_email: (
        Annotated[
            str,
            Meta(
                description="Email of the person in the organization who can provide information about the object type",
                max_length=200,
            ),
        ]
        | None
    ) = field(name="contactEmail", default=None)
    source: (
        Annotated[
            str,
            Meta(
                description="Name of the system from which the object type originates",
                max_length=200,
            ),
        ]
        | None
    ) = None
    update_frequency: (
        Annotated[
            UpdateFrequencyEnum,
            Meta(
                description="Indicates how often the object type is updated\n\n* `real_time` - Real-time\n* `hourly` - Hourly\n* `daily` - Daily\n* `weekly` - Weekly\n* `monthly` - Monthly\n* `yearly` - Yearly\n* `unknown` - Unknown"
            ),
        ]
        | None
    ) = field(name="updateFrequency", default=None)
    provider_organization: (
        Annotated[
            str,
            Meta(
                description="Organization which is responsible for publication of the object type",
                max_length=200,
            ),
        ]
        | None
    ) = field(name="providerOrganization", default=None)
    documentation_url: (
        Annotated[
            str,
            Meta(
                description="Link to the documentation for the object type",
                max_length=200,
            ),
        ]
        | None
    ) = field(name="documentationUrl", default=None)
    labels: (
        Annotated[
            dict[str, str],
            Meta(description="Key-value pairs of keywords related for the object type"),
        ]
        | None
    ) = None
    created_at: (
        Annotated[date, Meta(description="Date when the object type was created")]
        | None
    ) = field(name="createdAt", default=None)
    modified_at: (
        Annotated[date, Meta(description="Last date when the object type was modified")]
        | None
    ) = field(name="modifiedAt", default=None)
    allow_geometry: (
        Annotated[
            bool,
            Meta(
                description="Shows whether the related objects can have geographic coordinates. If the value is 'false' the related objects are not allowed to have coordinates and the creation/update of objects with `geometry` property will raise an error "
            ),
        ]
        | None
    ) = field(name="allowGeometry", default=None)
    versions: (
        Annotated[
            List[str], Meta(description="list of URLs for the OBJECTTYPE versions")
        ]
        | None
    ) = None


class PatchedObjectVersion(Struct, kw_only=True):
    url: str | None = None
    version: (
        Annotated[int, Meta(description="Integer version of the OBJECTTYPE")] | None
    ) = None
    object_type: str | None = field(name="objectType", default=None)
    status: (
        Annotated[
            StatusEnum,
            Meta(
                description="Status of the object type version\n\n* `published` - Published\n* `draft` - Draft\n* `deprecated` - Deprecated"
            ),
        ]
        | None
    ) = None
    json_schema: (
        Annotated[
            Any,
            Meta(description="JSON schema for Object validation", title="JSON schema"),
        ]
        | None
    ) = field(name="jsonSchema", default=None)
    created_at: (
        Annotated[date, Meta(description="Date when the version was created")] | None
    ) = field(name="createdAt", default=None)
    modified_at: (
        Annotated[date, Meta(description="Last date when the version was modified")]
        | None
    ) = field(name="modifiedAt", default=None)
    published_at: (
        Annotated[
            date,
            Meta(
                description="Date when the version was published", title="Published_at"
            ),
        ]
        | None
    ) = field(name="publishedAt", default=None)
