/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/auth/ensure-csrf/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get CSRF cookie */
        get: operations["auth_ensure_csrf_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/login/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login */
        post: operations["auth_login_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/logout/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Logout */
        post: operations["auth_logout_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/health-checks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get health checks
         * @description Obtain information about whether the application is configured correctly.
         */
        get: operations["health_checks_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/oidc-info/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve OIDC info
         * @description Returns info about OIDC that is needed by the frontend.
         */
        get: operations["oidc_info_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/service/{slug}/catalogi/choices/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get catalogue choices
         * @description Retrieve the catalogues available in an Open Zaak instance. The value is the URL of the catalogus as returned from Open Zaak, while the label is the name of the catalogue (if configured) and otherwise the domain field.
         */
        get: operations["service_catalogi_choices_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/service/{slug}/informatieobjecttypen/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get informatieobjecttypen
         * @description Retrive informatieobjecttypen from Open Zaak.
         */
        get: operations["service_informatieobjecttypen_retrieve"];
        put?: never;
        /**
         * Create an informatieobjecttypen
         * @description Create an informatieobjecttypen.
         */
        post: operations["service_informatieobjecttypen_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/service/{slug}/informatieobjecttypen/{uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an informatieobjecttype
         * @description Retrive an informatieobjecttype from Open Zaak.
         */
        get: operations["service_informatieobjecttypen_retrieve_one"];
        /**
         * Put an informatieobjecttype
         * @description Fully update an informatieobjecttype from Open Zaak. This will work only with an Open Zaak API token with the `catalogi.geforceerd-schrijven` permission if the informatieobjecttype is not a concept. Otherwise will return a 400.
         */
        put: operations["service_informatieobjecttypen_update"];
        post?: never;
        /**
         * Delete an informatieobjecttype
         * @description Remove permanently an informatieobjecttype from OZ.
         */
        delete: operations["service_informatieobjecttypen_destroy"];
        options?: never;
        head?: never;
        /**
         * Patch an informatieobjecttype
         * @description Partially update a informatieobjecttype from Open Zaak. This will work only with an Open Zaak API token with the `catalogi.geforceerd-schrijven` permission if the informatieobjecttype is not a concept. Otherwise will return a 400.
         */
        patch: operations["service_informatieobjecttypen_partial_update"];
        trace?: never;
    };
    "/api/v1/service/{slug}/informatieobjecttypen/{uuid}/publish/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Publish an informatieobjecttype
         * @description Publish an informatieobjecttype
         */
        post: operations["informatieobjecttype_publish"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/service/{slug}/zaaktypen/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get zaaktypen
         * @description Retrieve zaaktypen from Open Zaak.
         */
        get: operations["service_zaaktypen_retrieve"];
        put?: never;
        /**
         * Create a zaaktype
         * @description Create a zaaktype.
         */
        post: operations["service_zaaktypen_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/service/{slug}/zaaktypen/{uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a zaaktype
         * @description Retrive a zaaktype from Open Zaak.
         */
        get: operations["service_zaaktype_retrieve_one"];
        /**
         * Put a zaaktype
         * @description Fully update a zaaktype from Open Zaak. According to OZ specs, this should only work with draft zaaktypen. In practice, it modifies also the non-draft zaaktypen.
         */
        put: operations["service_zaaktypen_update"];
        post?: never;
        /**
         * Delete a zaaktype
         * @description Delete a zaaktype from Open Zaak. According to OZ specs, this should only work with draft zaaktypen. In practice, it deletes also the published zaaktypen.
         */
        delete: operations["service_zaaktypen_destroy"];
        options?: never;
        head?: never;
        /**
         * Patch a zaaktype
         * @description Partially update a zaaktype from Open Zaak. According to OZ specs, this should only work with draft zaaktypen. In practice, it modifies also the non-draft zaaktypen.
         */
        patch: operations["service_zaaktypen_partial_update"];
        trace?: never;
    };
    "/api/v1/service/{slug}/zaaktypen/{uuid}/publish/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Publish a zaaktype
         * @description Publish a zaaktype
         */
        post: operations["service_zaaktypen_publish"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/service/{slug}/zaaktypen/{zaaktype}/besluittypen/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Besluittypen
         * @description Retrive Besluittypen from Open Zaak.
         */
        get: operations["service_zaaktypen_besluittypen_retrieve"];
        put?: never;
        /**
         * Create an Besluittypen
         * @description Create an Besluittypen.
         */
        post: operations["service_zaaktypen_besluittypen_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/service/{slug}/zaaktypen/{zaaktype}/besluittypen/{uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an Besluittype
         * @description Retrieve an Besluittype from Open Zaak.
         */
        get: operations["service_besluittypen_retrieve_one"];
        /**
         * Put an Besluittype
         * @description Fully update a Besluittype from Open Zaak.
         */
        put: operations["service_zaaktypen_besluittypen_update"];
        post?: never;
        /**
         * Delete an Besluittype
         * @description Remove permanently a Besluittype from Open Zaak.
         */
        delete: operations["service_zaaktypen_besluittypen_destroy"];
        options?: never;
        head?: never;
        /**
         * Patch an Besluittype
         * @description Partially update a Besluittype from Open Zaak.
         */
        patch: operations["service_zaaktypen_besluittypen_partial_update"];
        trace?: never;
    };
    "/api/v1/service/{slug}/zaaktypen/{zaaktype}/eigenschappen/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get eigenschappen
         * @description Retrieve eigenschappen from Open Zaak.
         */
        get: operations["service_zaaktypen_eigenschappen_retrieve"];
        put?: never;
        /**
         * Create an eigenschappen
         * @description Create an eigenschappen.
         */
        post: operations["service_zaaktypen_eigenschappen_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/service/{slug}/zaaktypen/{zaaktype}/eigenschappen/{uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an eigenschappe
         * @description Retrieve an eigenschap from Open Zaak.
         */
        get: operations["service_eigenschappen_retrieve_one"];
        /**
         * Put an eigenschappe
         * @description Fully update a eigenschap from Open Zaak.
         */
        put: operations["service_zaaktypen_eigenschappen_update"];
        post?: never;
        /**
         * Delete an eigenschappe
         * @description Remove permanently a eigenschap from Open Zaak.
         */
        delete: operations["service_zaaktypen_eigenschappen_destroy"];
        options?: never;
        head?: never;
        /**
         * Patch an eigenschappe
         * @description Partially update a eigenschap from Open Zaak.
         */
        patch: operations["service_zaaktypen_eigenschappen_partial_update"];
        trace?: never;
    };
    "/api/v1/service/{slug}/zaaktypen/{zaaktype}/resultaattypen/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get resultaattypen
         * @description Retrive resultaattypen from Open Zaak.
         */
        get: operations["service_zaaktypen_resultaattypen_retrieve"];
        put?: never;
        /**
         * Create an resultaattypen
         * @description Create an resultaattypen.
         */
        post: operations["service_zaaktypen_resultaattypen_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/service/{slug}/zaaktypen/{zaaktype}/resultaattypen/{uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an resultaattype
         * @description Retrieve an resultaattype from Open Zaak.
         */
        get: operations["service_resultaattypen_retrieve_one"];
        /**
         * Put an resultaattype
         * @description Fully update a resultaattype from Open Zaak.
         */
        put: operations["service_zaaktypen_resultaattypen_update"];
        post?: never;
        /**
         * Delete an resultaattype
         * @description Remove permanently a resultaattype from Open Zaak.
         */
        delete: operations["service_zaaktypen_resultaattypen_destroy"];
        options?: never;
        head?: never;
        /**
         * Patch an resultaattype
         * @description Partially update a resultaattype from Open Zaak.
         */
        patch: operations["service_zaaktypen_resultaattypen_partial_update"];
        trace?: never;
    };
    "/api/v1/service/{slug}/zaaktypen/{zaaktype}/roltypen/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get roltypen
         * @description Retrive roltypen from Open Zaak.
         */
        get: operations["service_zaaktypen_roltypen_retrieve"];
        put?: never;
        /**
         * Create an roltypen
         * @description Create an roltypen.
         */
        post: operations["service_zaaktypen_roltypen_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/service/{slug}/zaaktypen/{zaaktype}/roltypen/{uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an roltype
         * @description Retrieve an roltype from Open Zaak.
         */
        get: operations["service_roltypen_retrieve_one"];
        /**
         * Put an roltype
         * @description Fully update a roltype from Open Zaak.
         */
        put: operations["service_zaaktypen_roltypen_update"];
        post?: never;
        /**
         * Delete an roltype
         * @description Remove permanently a roltype from Open Zaak.
         */
        delete: operations["service_zaaktypen_roltypen_destroy"];
        options?: never;
        head?: never;
        /**
         * Patch an roltype
         * @description Partially update a roltype from Open Zaak.
         */
        patch: operations["service_zaaktypen_roltypen_partial_update"];
        trace?: never;
    };
    "/api/v1/service/{slug}/zaaktypen/{zaaktype}/statustypen/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get statustypen
         * @description Retrive statustypen from Open Zaak.
         */
        get: operations["service_zaaktypen_statustypen_retrieve"];
        put?: never;
        /**
         * Create an statustypen
         * @description Create an statustypen.
         */
        post: operations["service_zaaktypen_statustypen_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/service/{slug}/zaaktypen/{zaaktype}/statustypen/{uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an statustype
         * @description Retrieve an statustype from Open Zaak.
         */
        get: operations["service_statustypen_retrieve_one"];
        /**
         * Put an statustype
         * @description Fully update a statustype from Open Zaak.
         */
        put: operations["service_zaaktypen_statustypen_update"];
        post?: never;
        /**
         * Delete an statustype
         * @description Remove permanently a statustype from Open Zaak.
         */
        delete: operations["service_zaaktypen_statustypen_destroy"];
        options?: never;
        head?: never;
        /**
         * Patch an statustype
         * @description Partially update a statustype from Open Zaak.
         */
        patch: operations["service_zaaktypen_statustypen_partial_update"];
        trace?: never;
    };
    "/api/v1/service/{slug}/zaaktypen/{zaaktype}/zaakobjecttypen/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get zaakobjecttypen
         * @description Retrive zaakobjecttypen from Open Zaak.
         */
        get: operations["service_zaaktypen_zaakobjecttypen_retrieve"];
        put?: never;
        /**
         * Create an zaakobjecttypen
         * @description Create an zaakobjecttypen.
         */
        post: operations["service_zaaktypen_zaakobjecttypen_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/service/{slug}/zaaktypen/{zaaktype}/zaakobjecttypen/{uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an zaakobjecttype
         * @description Retrieve an zaakobjecttype from Open Zaak.
         */
        get: operations["service_zaakobjecttypen_retrieve_one"];
        /**
         * Put an zaakobjecttype
         * @description Fully update a zaakobjecttype from Open Zaak.
         */
        put: operations["service_zaaktypen_zaakobjecttypen_update"];
        post?: never;
        /**
         * Delete an zaakobjecttype
         * @description Remove permanently a zaakobjecttype from Open Zaak.
         */
        delete: operations["service_zaaktypen_zaakobjecttypen_destroy"];
        options?: never;
        head?: never;
        /**
         * Patch an zaakobjecttype
         * @description Partially update a zaakobjecttype from Open Zaak.
         */
        patch: operations["service_zaaktypen_zaakobjecttypen_partial_update"];
        trace?: never;
    };
    "/api/v1/service/{slug}/zaaktypen/{zaaktype}/zaaktypeinformatieobjecttypen/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get zaaktype-informatieobjecttypen
         * @description Retrive zaaktype-informatieobjecttypen from Open Zaak.
         */
        get: operations["service_zaaktypen_zaaktypeinformatieobjecttypen_retrieve"];
        put?: never;
        /**
         * Create a zaaktype-informatieobjecttype
         * @description Create a zaaktype-informatieobjecttype. The informatieobjecttype and the zaaktype need to belong to the same catalogus
         */
        post: operations["service_zaaktypen_zaaktypeinformatieobjecttypen_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/service/{slug}/zaaktypen/{zaaktype}/zaaktypeinformatieobjecttypen/{uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an zaaktype_informatieobjecttype
         * @description Retrieve an zaaktype_informatieobjecttype from Open Zaak.
         */
        get: operations["service_zaaktypeinformatieobjecttypen_retrieve_one"];
        /**
         * Put an zaaktype_informatieobjecttype
         * @description Fully update a zaaktype_informatieobjecttype from Open Zaak.
         */
        put: operations["service_zaaktypen_zaaktypeinformatieobjecttypen_update"];
        post?: never;
        /**
         * Delete an zaaktype_informatieobjecttype
         * @description Remove permanently a zaaktype_informatieobjecttype from Open Zaak.
         */
        delete: operations["service_zaaktypen_zaaktypeinformatieobjecttypen_destroy"];
        options?: never;
        head?: never;
        /**
         * Patch an zaaktype_informatieobjecttype
         * @description Partially update a zaaktype_informatieobjecttype from Open Zaak.
         */
        patch: operations["service_zaaktypen_zaaktypeinformatieobjecttypen_partial_update"];
        trace?: never;
    };
    "/api/v1/service/choices/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Open Zaak choices
         * @description Get the available Open Zaak catalogi instances. The value is the slug of the configured service, while the label is the name of the service.
         */
        get: operations["service_choices_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/template/zaaktype/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get ZaakTypeSjablonen */
        get: operations["template_zaaktype_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/template/zaaktype/{uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get ZaakTypeSjabloon */
        get: operations["template_zaaktype_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/whoami/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Who Am I
         * @description Returns the current logged in user.
         */
        get: operations["whoami_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * AardRelatieEnum
         * @enum {unknown}
         */
        AardRelatieEnum: "bijdrage" | "onderwerp" | "vervolg";
        /**
         * AfleidingswijzeEnum
         * @enum {unknown}
         */
        AfleidingswijzeEnum: "afgehandeld" | "ander_datumkenmerk" | "eigenschap" | "gerelateerde_zaak" | "hoofdzaak" | "ingangsdatum_besluit" | "termijn" | "vervaldatum_besluit" | "zaakobject";
        /**
         * ArchiefnominatieEnum
         * @enum {unknown}
         */
        ArchiefnominatieEnum: "" | "blijvend_bewaren" | "vernietigen";
        Auth: {
            username: string;
            password: string;
        };
        /** BesluitType */
        BesluitType: {
            /** @description URL-referentie naar de CATALOGUS waartoe dit BESLUITTYPE behoort. */
            catalogus: string;
            /** @description Aanduiding of BESLUITen van dit BESLUITTYPE gepubliceerd moeten worden. */
            publicatieIndicatie: boolean;
            /** @description URL-referenties naar het INFORMATIEOBJECTTYPE van informatieobjecten waarin besluiten van dit BESLUITTYPE worden vastgelegd. */
            informatieobjecttypen: string[];
            /**
             * Format: date
             * @description De datum waarop het is ontstaan.
             */
            beginGeldigheid: string;
            /** @default null */
            url: string | null;
            /** @default null */
            zaaktypen: string[] | null;
            /** @default null */
            omschrijving: string | null;
            /** @default null */
            omschrijvingGeneriek: string | null;
            /** @default null */
            besluitcategorie: string | null;
            /** @default null */
            reactietermijn: string | null;
            /** @default null */
            publicatietekst: string | null;
            /** @default null */
            publicatietermijn: string | null;
            /** @default null */
            toelichting: string | null;
            /** @default null */
            eindeGeldigheid: string | null;
            /** @default null */
            concept: boolean | null;
            /** @default null */
            resultaattypen: string[] | null;
            /** @default null */
            resultaattypenOmschrijving: string[] | null;
            /** @default null */
            vastgelegdIn: string[] | null;
            /** @default null */
            beginObject: string | null;
            /** @default null */
            eindeObject: string | null;
        };
        /** BesluitTypeRequest */
        BesluitTypeRequest: {
            /** @description URL-referentie naar de CATALOGUS waartoe dit BESLUITTYPE behoort. */
            catalogus: string;
            /** @description Aanduiding of BESLUITen van dit BESLUITTYPE gepubliceerd moeten worden. */
            publicatieIndicatie: boolean;
            /** @description URL-referenties naar het INFORMATIEOBJECTTYPE van informatieobjecten waarin besluiten van dit BESLUITTYPE worden vastgelegd. */
            informatieobjecttypen: string[];
            /**
             * Format: date
             * @description De datum waarop het is ontstaan.
             */
            beginGeldigheid: string;
            /** @default null */
            omschrijving: string | null;
            /** @default null */
            omschrijvingGeneriek: string | null;
            /** @default null */
            besluitcategorie: string | null;
            /** @default null */
            reactietermijn: string | null;
            /** @default null */
            publicatietekst: string | null;
            /** @default null */
            publicatietermijn: string | null;
            /** @default null */
            toelichting: string | null;
            /** @default null */
            eindeGeldigheid: string | null;
        };
        /** BesluitTypeWithUUID */
        BesluitTypeWithUUID: {
            /** Format: uuid */
            uuid?: string;
            /** @description URL-referentie naar de CATALOGUS waartoe dit BESLUITTYPE behoort. */
            catalogus: string;
            /** @description Aanduiding of BESLUITen van dit BESLUITTYPE gepubliceerd moeten worden. */
            publicatieIndicatie: boolean;
            /** @description URL-referenties naar het INFORMATIEOBJECTTYPE van informatieobjecten waarin besluiten van dit BESLUITTYPE worden vastgelegd. */
            informatieobjecttypen: string[];
            /**
             * Format: date
             * @description De datum waarop het is ontstaan.
             */
            beginGeldigheid: string;
            /** @default null */
            url: string | null;
            /** @default null */
            zaaktypen: string[] | null;
            /** @default null */
            omschrijving: string | null;
            /** @default null */
            omschrijvingGeneriek: string | null;
            /** @default null */
            besluitcategorie: string | null;
            /** @default null */
            reactietermijn: string | null;
            /** @default null */
            publicatietekst: string | null;
            /** @default null */
            publicatietermijn: string | null;
            /** @default null */
            toelichting: string | null;
            /** @default null */
            eindeGeldigheid: string | null;
            /** @default null */
            concept: boolean | null;
            /** @default null */
            resultaattypen: string[] | null;
            /** @default null */
            resultaattypenOmschrijving: string[] | null;
            /** @default null */
            vastgelegdIn: string[] | null;
            /** @default null */
            beginObject: string | null;
            /** @default null */
            eindeObject: string | null;
        };
        /** BronCatalogus */
        BronCatalogus: {
            /** @description Het domein van de CATALOGUS waaraan het ZAAKTYPE is ontleend. */
            domein: string;
            /** @description Het RSIN van de INGESCHREVEN NIET-NATUURLIJK PERSOON die beheerder is van de CATALOGUS waaraan het ZAAKTYPE is ontleend. */
            rsin: string;
            /** @default null */
            url: string | null;
        };
        /** BronCatalogusRequest */
        BronCatalogusRequest: {
            /** @description Het domein van de CATALOGUS waaraan het ZAAKTYPE is ontleend. */
            domein: string;
            /** @description Het RSIN van de INGESCHREVEN NIET-NATUURLIJK PERSOON die beheerder is van de CATALOGUS waaraan het ZAAKTYPE is ontleend. */
            rsin: string;
            /** @default null */
            url: string | null;
        };
        /** BronZaaktype */
        BronZaaktype: {
            /** @description De Zaaktype-identificatie van het bronzaaktype binnen de CATALOGUS. */
            identificatie: string;
            /** @description De Zaaktype-omschrijving van het bronzaaktype, zoals gehanteerd in de Broncatalogus. */
            omschrijving: string;
            /** @default null */
            url: string | null;
        };
        /** BronZaaktypeRequest */
        BronZaaktypeRequest: {
            /** @description De Zaaktype-identificatie van het bronzaaktype binnen de CATALOGUS. */
            identificatie: string;
            /** @description De Zaaktype-omschrijving van het bronzaaktype, zoals gehanteerd in de Broncatalogus. */
            omschrijving: string;
            /** @default null */
            url: string | null;
        };
        /** BrondatumArchiefprocedure */
        BrondatumArchiefprocedure: {
            /**
             * Afleidingswijze brondatum
             * @description Wijze van bepalen van de brondatum.
             *
             *     Uitleg bij mogelijke waarden:
             *
             *     * `afgehandeld` - (Afgehandeld) De termijn start op de datum waarop de zaak is afgehandeld (ZAAK.Einddatum in het RGBZ).
             *     * `ander_datumkenmerk` - (Ander datumkenmerk) De termijn start op de datum die is vastgelegd in een ander datumveld dan de datumvelden waarop de overige waarden (van deze attribuutsoort) betrekking hebben. `Objecttype`, `Registratie` en `Datumkenmerk` zijn niet leeg.
             *     * `eigenschap` - (Eigenschap) De termijn start op de datum die is vastgelegd in een ander datumveld dan de datumvelden waarop de overige waarden (van deze attribuutsoort) betrekking hebben. `Objecttype`, `Registratie` en `Datumkenmerk` zijn niet leeg.
             *     * `gerelateerde_zaak` - (Gerelateerde zaak) De termijn start op de datum waarop de gerelateerde zaak is afgehandeld (`ZAAK.Einddatum` of `ZAAK.Gerelateerde_zaak.Einddatum` in het RGBZ). `ResultaatType.ZaakType` heeft gerelateerd `ZaakType`
             *     * `hoofdzaak` - (Hoofdzaak) De termijn start op de datum waarop de gerelateerde zaak is afgehandeld, waarvan de zaak een deelzaak is (`ZAAK.Einddatum` van de hoofdzaak in het RGBZ). ResultaatType.ZaakType is deelzaaktype van ZaakType.
             *     * `ingangsdatum_besluit` - (Ingangsdatum besluit) De termijn start op de datum waarop het besluit van kracht wordt (`BESLUIT.Ingangsdatum` in het RGBZ).	ResultaatType.ZaakType heeft relevant BesluitType
             *     * `termijn` - (Termijn) De termijn start een vast aantal jaren na de datum waarop de zaak is afgehandeld (`ZAAK.Einddatum` in het RGBZ).
             *     * `vervaldatum_besluit` - (Vervaldatum besluit) De termijn start op de dag na de datum waarop het besluit vervalt (`BESLUIT.Vervaldatum` in het RGBZ). ResultaatType.ZaakType heeft relevant BesluitType
             *     * `zaakobject` - (Zaakobject) De termijn start op de einddatum geldigheid van het zaakobject waarop de zaak betrekking heeft (bijvoorbeeld de overlijdendatum van een Persoon). M.b.v. de attribuutsoort `Objecttype` wordt vastgelegd om welke zaakobjecttype het gaat; m.b.v. de attribuutsoort `Datumkenmerk` wordt vastgelegd welke datum-attribuutsoort van het zaakobjecttype het betreft.
             * @enum {unknown}
             */
            afleidingswijze: "afgehandeld" | "ander_datumkenmerk" | "eigenschap" | "gerelateerde_zaak" | "hoofdzaak" | "ingangsdatum_besluit" | "termijn" | "vervaldatum_besluit" | "zaakobject";
            /** @default null */
            datumkenmerk: string | null;
            /** @default null */
            einddatumBekend: boolean | null;
            /** @default null */
            objecttype: components["schemas"]["ObjecttypeEnum"] | null;
            /** @default null */
            registratie: string | null;
            /** @default null */
            procestermijn: string | null;
        };
        /** BrondatumArchiefprocedureRequest */
        BrondatumArchiefprocedureRequest: {
            /**
             * Afleidingswijze brondatum
             * @description Wijze van bepalen van de brondatum.
             *
             *     Uitleg bij mogelijke waarden:
             *
             *     * `afgehandeld` - (Afgehandeld) De termijn start op de datum waarop de zaak is afgehandeld (ZAAK.Einddatum in het RGBZ).
             *     * `ander_datumkenmerk` - (Ander datumkenmerk) De termijn start op de datum die is vastgelegd in een ander datumveld dan de datumvelden waarop de overige waarden (van deze attribuutsoort) betrekking hebben. `Objecttype`, `Registratie` en `Datumkenmerk` zijn niet leeg.
             *     * `eigenschap` - (Eigenschap) De termijn start op de datum die is vastgelegd in een ander datumveld dan de datumvelden waarop de overige waarden (van deze attribuutsoort) betrekking hebben. `Objecttype`, `Registratie` en `Datumkenmerk` zijn niet leeg.
             *     * `gerelateerde_zaak` - (Gerelateerde zaak) De termijn start op de datum waarop de gerelateerde zaak is afgehandeld (`ZAAK.Einddatum` of `ZAAK.Gerelateerde_zaak.Einddatum` in het RGBZ). `ResultaatType.ZaakType` heeft gerelateerd `ZaakType`
             *     * `hoofdzaak` - (Hoofdzaak) De termijn start op de datum waarop de gerelateerde zaak is afgehandeld, waarvan de zaak een deelzaak is (`ZAAK.Einddatum` van de hoofdzaak in het RGBZ). ResultaatType.ZaakType is deelzaaktype van ZaakType.
             *     * `ingangsdatum_besluit` - (Ingangsdatum besluit) De termijn start op de datum waarop het besluit van kracht wordt (`BESLUIT.Ingangsdatum` in het RGBZ).	ResultaatType.ZaakType heeft relevant BesluitType
             *     * `termijn` - (Termijn) De termijn start een vast aantal jaren na de datum waarop de zaak is afgehandeld (`ZAAK.Einddatum` in het RGBZ).
             *     * `vervaldatum_besluit` - (Vervaldatum besluit) De termijn start op de dag na de datum waarop het besluit vervalt (`BESLUIT.Vervaldatum` in het RGBZ). ResultaatType.ZaakType heeft relevant BesluitType
             *     * `zaakobject` - (Zaakobject) De termijn start op de einddatum geldigheid van het zaakobject waarop de zaak betrekking heeft (bijvoorbeeld de overlijdendatum van een Persoon). M.b.v. de attribuutsoort `Objecttype` wordt vastgelegd om welke zaakobjecttype het gaat; m.b.v. de attribuutsoort `Datumkenmerk` wordt vastgelegd welke datum-attribuutsoort van het zaakobjecttype het betreft.
             * @enum {unknown}
             */
            afleidingswijze: "afgehandeld" | "ander_datumkenmerk" | "eigenschap" | "gerelateerde_zaak" | "hoofdzaak" | "ingangsdatum_besluit" | "termijn" | "vervaldatum_besluit" | "zaakobject";
            /** @default null */
            datumkenmerk: string | null;
            /** @default null */
            einddatumBekend: boolean | null;
            /** @default null */
            objecttype: components["schemas"]["ObjecttypeEnum"] | null;
            /** @default null */
            registratie: string | null;
            /** @default null */
            procestermijn: string | null;
        };
        /** CheckListItem */
        CheckListItem: {
            /** @description De betekenisvolle benaming van het checklistitem */
            itemnaam: string;
            /** @description Een betekenisvolle vraag waaruit blijkt waarop het aandachtspunt gecontroleerd moet worden. */
            vraagstelling: string;
            /** @default null */
            toelichting: string | null;
            /** @default null */
            verplicht: boolean | null;
        };
        /** CheckListItemRequest */
        CheckListItemRequest: {
            /** @description De betekenisvolle benaming van het checklistitem */
            itemnaam: string;
            /** @description Een betekenisvolle vraag waaruit blijkt waarop het aandachtspunt gecontroleerd moet worden. */
            vraagstelling: string;
            /** @default null */
            toelichting: string | null;
            /** @default null */
            verplicht: boolean | null;
        };
        /**
         * DataClassificationEnum
         * @enum {unknown}
         */
        DataClassificationEnum: "confidential" | "intern" | "open" | "strictly_confidential";
        /** DetailResponseWithoutVersions[InformatieObjectType] */
        DetailResponseWithoutVersions_InformatieObjectType_: {
            result: components["schemas"]["InformatieObjectType"];
            fieldsets: [
                string,
                components["schemas"]["FrontendFieldSet"]
            ][];
            fields: components["schemas"]["OBField"][];
        };
        /** DetailResponse[ExpandableZaakType] */
        DetailResponse_ExpandableZaakType_: {
            result: components["schemas"]["ExpandableZaakType"];
            fieldsets: [
                string,
                components["schemas"]["FrontendFieldSet"]
            ][];
            fields: components["schemas"]["OBField"][];
            versions?: components["schemas"]["VersionSummary"][];
        };
        /** Eigenschap */
        Eigenschap: {
            /** @description De naam van de EIGENSCHAP */
            naam: string;
            /** @description De beschrijving van de betekenis van deze EIGENSCHAP */
            definitie: string;
            specificatie: components["schemas"]["EigenschapSpecificatie"];
            /** @description URL-referentie naar het ZAAKTYPE van de ZAAKen waarvoor deze EIGENSCHAP van belang is. */
            zaaktype: string;
            /** @default null */
            url: string | null;
            /** @default null */
            toelichting: string | null;
            /** @default null */
            zaaktypeIdentificatie: string | null;
            /** @default null */
            catalogus: string | null;
            /** @default null */
            statustype: string | null;
            /** @default null */
            beginGeldigheid: string | null;
            /** @default null */
            eindeGeldigheid: string | null;
            /** @default null */
            beginObject: string | null;
            /** @default null */
            eindeObject: string | null;
        };
        /** EigenschapRequest */
        EigenschapRequest: {
            /** @description De naam van de EIGENSCHAP */
            naam: string;
            /** @description De beschrijving van de betekenis van deze EIGENSCHAP */
            definitie: string;
            specificatie: components["schemas"]["EigenschapSpecificatieRequest"];
            /** @description URL-referentie naar het ZAAKTYPE van de ZAAKen waarvoor deze EIGENSCHAP van belang is. */
            zaaktype: string;
            /** @description Een toelichting op deze EIGENSCHAP en het belang hiervan voor zaken van dit ZAAKTYPE. */
            toelichting?: string;
            statustype?: string | null;
            beginGeldigheid?: string | null;
            eindeGeldigheid?: string | null;
        };
        /** EigenschapSpecificatie */
        EigenschapSpecificatie: {
            /** @description Het soort tekens waarmee waarden van de EIGENSCHAP kunnen worden vastgelegd.
             *
             *     Uitleg bij mogelijke waarden:
             *
             *     * `tekst` - Tekst
             *     * `getal` - Getal
             *     * `datum` - Datum
             *     * `datum_tijd` - Datum/tijd */
            formaat: components["schemas"]["FormaatEnum"];
            /** @description Het aantal karakters (lengte) waarmee waarden van de EIGENSCHAP worden vastgelegd. */
            lengte: string;
            /** @description Het aantal mogelijke voorkomens van waarden van deze EIGENSCHAP bij een zaak van het ZAAKTYPE. */
            kardinaliteit: string;
            /** @default null */
            groep: string | null;
            /** @default null */
            waardenverzameling: string[] | null;
        };
        /** EigenschapSpecificatieRequest */
        EigenschapSpecificatieRequest: {
            /** @description Het soort tekens waarmee waarden van de EIGENSCHAP kunnen worden vastgelegd.
             *
             *     Uitleg bij mogelijke waarden:
             *
             *     * `tekst` - Tekst
             *     * `getal` - Getal
             *     * `datum` - Datum
             *     * `datum_tijd` - Datum/tijd */
            formaat: components["schemas"]["FormaatEnum"];
            /** @description Het aantal karakters (lengte) waarmee waarden van de EIGENSCHAP worden vastgelegd. */
            lengte: string;
            /** @description Het aantal mogelijke voorkomens van waarden van deze EIGENSCHAP bij een zaak van het ZAAKTYPE. */
            kardinaliteit: string;
            /** @default null */
            groep: string | null;
            /** @default null */
            waardenverzameling: string[] | null;
        };
        /** EigenschapWithUUID */
        EigenschapWithUUID: {
            /** Format: uuid */
            uuid?: string;
            formaat?: components["schemas"]["FormaatEnum"];
            /** @description De naam van de EIGENSCHAP */
            naam: string;
            /** @description De beschrijving van de betekenis van deze EIGENSCHAP */
            definitie: string;
            specificatie: components["schemas"]["EigenschapSpecificatie"];
            /** @description URL-referentie naar het ZAAKTYPE van de ZAAKen waarvoor deze EIGENSCHAP van belang is. */
            zaaktype: string;
            /** @default null */
            url: string | null;
            /** @default null */
            toelichting: string | null;
            /** @default null */
            zaaktypeIdentificatie: string | null;
            /** @default null */
            catalogus: string | null;
            /** @default null */
            statustype: string | null;
            /** @default null */
            beginGeldigheid: string | null;
            /** @default null */
            eindeGeldigheid: string | null;
            /** @default null */
            beginObject: string | null;
            /** @default null */
            eindeObject: string | null;
        };
        /** ExpandableZaakObjectTypeWithUUID */
        ExpandableZaakObjectTypeWithUUID: {
            /** @description URL-referentie naar de OBJECTTYPE waartoe dit ZAAKOBJECTTYPE behoort. */
            objecttype: string;
            /** Format: uuid */
            uuid?: string;
            /**
             * ZaakObjectTypeExtension
             * @default {}
             */
            _expand: {
                objecttype?: components["schemas"]["ObjectType"];
            };
            /** @description Aanduiding waarmee wordt aangegeven of het ZAAKOBJECTTYPE een ander, niet in RSGB en RGBZ voorkomend, objecttype betreft. */
            anderObjecttype: boolean;
            /** @description Omschrijving van de betrekking van het Objecttype op zaken van het gerelateerde ZAAKTYPE. */
            relatieOmschrijving: string;
            /** @description URL-referentie naar de ZAAKTYPE waartoe dit ZAAKOBJECTTYPE behoort. */
            zaaktype: string;
            /** @default null */
            url: string | null;
            /** @default null */
            zaaktypeIdentificatie: string | null;
            /** @default null */
            resultaattypen: string[] | null;
            /** @default null */
            statustype: string | null;
            /** @default null */
            catalogus: string | null;
            /** @default null */
            beginGeldigheid: string | null;
            /** @default null */
            eindeGeldigheid: string | null;
            /** @default null */
            beginObject: string | null;
            /** @default null */
            eindeObject: string | null;
        };
        /** ExpandableZaakType */
        ExpandableZaakType: {
            /** @default null */
            selectielijstProcestype: string | null;
            /** Format: uuid */
            uuid?: string;
            /**
             * ZaakTypeExtension
             * @default {}
             */
            _expand: {
                besluittypen?: components["schemas"]["BesluitTypeWithUUID"][];
                statustypen?: components["schemas"]["StatusTypeWithUUID"][];
                resultaattypen?: components["schemas"]["ResultaatTypeWithUUID"][];
                eigenschappen?: components["schemas"]["EigenschapWithUUID"][];
                informatieobjecttypen?: components["schemas"]["InformatieObjectTypeWithUUID"][];
                roltypen?: components["schemas"]["RolTypeWithUUID"][];
                deelzaaktypen?: components["schemas"]["ZaakTypeWithUUID"][];
                zaakobjecttypen?: components["schemas"]["ExpandableZaakObjectTypeWithUUID"][];
                selectielijstProcestype?: components["schemas"]["LAXProcesType"];
                zaaktypeinformatieobjecttypen?: components["schemas"]["ZaakTypeInformatieObjectTypeWithUUID"][];
            };
            /** @default [] */
            zaaktypeinformatieobjecttypen: components["schemas"]["ZaakTypeInformatieObjectTypeWithUUID"][];
            /** @description Omschrijving van de aard van ZAAKen van het ZAAKTYPE. */
            omschrijving: string;
            /** @description Aanduiding van de mate waarin zaakdossiers van ZAAKen van dit ZAAKTYPE voor de openbaarheid bestemd zijn. Indien de zaak bij het aanmaken geen vertrouwelijkheidaanduiding krijgt, dan wordt deze waarde gezet.
             *
             *     Uitleg bij mogelijke waarden:
             *
             *     * `openbaar` - Openbaar
             *     * `beperkt_openbaar` - Beperkt openbaar
             *     * `intern` - Intern
             *     * `zaakvertrouwelijk` - Zaakvertrouwelijk
             *     * `vertrouwelijk` - Vertrouwelijk
             *     * `confidentieel` - Confidentieel
             *     * `geheim` - Geheim
             *     * `zeer_geheim` - Zeer geheim */
            vertrouwelijkheidaanduiding: components["schemas"]["VertrouwelijkheidaanduidingEnum"];
            /** @description Een omschrijving van hetgeen beoogd is te bereiken met een zaak van dit zaaktype. */
            doel: string;
            /** @description Een omschrijving van de gebeurtenis die leidt tot het starten van een ZAAK van dit ZAAKTYPE. */
            aanleiding: string;
            /** @description Een aanduiding waarmee onderscheid wordt gemaakt tussen ZAAKTYPEn die Intern respectievelijk Extern geïnitieerd worden. Indien van beide sprake kan zijn, dan prevaleert de externe initiatie.
             *
             *     Uitleg bij mogelijke waarden:
             *
             *     * `inkomend` - Inkomend
             *     * `intern` - Intern
             *     * `uitgaand` - Uitgaand */
            indicatieInternOfExtern: components["schemas"]["IndicatieInternOfExternEnum"];
            /** @description Werkwoord dat hoort bij de handeling die de initiator verricht bij dit zaaktype. Meestal 'aanvragen', 'indienen' of 'melden'. Zie ook het IOB model op https://www.gemmaonline.nl/index.php/Imztc_2.1/doc/attribuutsoort/zaaktype.handeling_initiator */
            handelingInitiator: string;
            /** @description Het onderwerp van ZAAKen van dit ZAAKTYPE. In veel gevallen nauw gerelateerd aan de product- of dienstnaam uit de Producten- en Dienstencatalogus (PDC). Bijvoorbeeld: 'Evenementenvergunning', 'Geboorte', 'Klacht'. Zie ook het IOB model op https://www.gemmaonline.nl/index.php/Imztc_2.1/doc/attribuutsoort/zaaktype.onderwerp */
            onderwerp: string;
            /** @description Werkwoord dat hoort bij de handeling die de behandelaar verricht bij het afdoen van ZAAKen van dit ZAAKTYPE. Meestal 'behandelen', 'uitvoeren', 'vaststellen' of 'onderhouden'. Zie ook het IOB model op https://www.gemmaonline.nl/index.php/Imztc_2.1/doc/attribuutsoort/zaaktype.handeling_behandelaar */
            handelingBehandelaar: string;
            /** @description De periode waarbinnen volgens wet- en regelgeving een ZAAK van het ZAAKTYPE afgerond dient te zijn, in kalenderdagen. */
            doorlooptijd: string;
            /**
             * Opschorting/aanhouding mogelijk
             * @description Aanduiding die aangeeft of ZAAKen van dit mogelijk ZAAKTYPE kunnen worden opgeschort en/of aangehouden.
             */
            opschortingEnAanhoudingMogelijk: boolean;
            /** @description Aanduiding die aangeeft of de Doorlooptijd behandeling van ZAAKen van dit ZAAKTYPE kan worden verlengd. */
            verlengingMogelijk: boolean;
            /** @description Aanduiding of (het starten van) een ZAAK dit ZAAKTYPE gepubliceerd moet worden. */
            publicatieIndicatie: boolean;
            /** @description Het product of de dienst die door ZAAKen van dit ZAAKTYPE wordt voortgebracht. */
            productenOfDiensten: string[];
            /** @description Het Referentieproces dat ten grondslag ligt aan dit ZAAKTYPE. */
            referentieproces: components["schemas"]["ReferentieProces"];
            /** @description De (soort) organisatorische eenheid of (functie van) medewerker die verantwoordelijk is voor de uitvoering van zaken van het ZAAKTYPE. */
            verantwoordelijke: string;
            /**
             * Format: date
             * @description De datum waarop het is ontstaan.
             */
            beginGeldigheid: string;
            /**
             * Format: date
             * @description De datum waarop de (gewijzigde) kenmerken van het ZAAKTYPE geldig zijn geworden
             */
            versiedatum: string;
            /** @description URL-referentie naar de CATALOGUS waartoe dit ZAAKTYPE behoort. */
            catalogus: string;
            /**
             * heeft relevante besluittypen
             * @description URL-referenties naar de BESLUITTYPEN die mogelijk zijn binnen dit ZAAKTYPE.
             */
            besluittypen: string[];
            /** @description De ZAAKTYPEn van zaken die relevant zijn voor zaken van dit ZAAKTYPE. */
            gerelateerdeZaaktypen: components["schemas"]["ZaakTypenRelatie"][];
            /** @default null */
            url: string | null;
            /** @default null */
            identificatie: string | null;
            /** @default null */
            omschrijvingGeneriek: string | null;
            /** @default null */
            toelichting: string | null;
            /** @default null */
            servicenorm: string | null;
            /** @default null */
            verlengingstermijn: string | null;
            /** @default null */
            trefwoorden: string[] | null;
            /** @default null */
            publicatietekst: string | null;
            /** @default null */
            verantwoordingsrelatie: string[] | null;
            /** @default null */
            concept: boolean | null;
            /** @default null */
            broncatalogus: null | components["schemas"]["BronCatalogus"];
            /** @default null */
            bronzaaktype: null | components["schemas"]["BronZaaktype"];
            /** @default null */
            eindeGeldigheid: string | null;
            /** @default null */
            beginObject: string | null;
            /** @default null */
            eindeObject: string | null;
            /** @default null */
            statustypen: string[] | null;
            /** @default null */
            resultaattypen: string[] | null;
            /** @default null */
            eigenschappen: string[] | null;
            /** @default null */
            informatieobjecttypen: string[] | null;
            /** @default null */
            roltypen: string[] | null;
            /** @default null */
            deelzaaktypen: (string | null)[] | null;
            /** @default null */
            zaakobjecttypen: string[] | null;
        };
        /** ExpandableZaakTypeRequest */
        ExpandableZaakTypeRequest: {
            /**
             * ZaakTypeExtension
             * @default {}
             */
            _expand: {
                besluittypen?: components["schemas"]["BesluitTypeWithUUID"][];
                statustypen?: components["schemas"]["StatusTypeWithUUID"][];
                resultaattypen?: components["schemas"]["ResultaatTypeWithUUID"][];
                eigenschappen?: components["schemas"]["EigenschapWithUUID"][];
                informatieobjecttypen?: components["schemas"]["InformatieObjectTypeWithUUID"][];
                roltypen?: components["schemas"]["RolTypeWithUUID"][];
                deelzaaktypen?: components["schemas"]["ZaakTypeWithUUID"][];
                zaakobjecttypen?: components["schemas"]["ExpandableZaakObjectTypeWithUUID"][];
                selectielijstProcestype?: components["schemas"]["LAXProcesType"];
                zaaktypeinformatieobjecttypen?: components["schemas"]["ZaakTypeInformatieObjectTypeWithUUID"][];
            };
            /** @description Omschrijving van de aard van ZAAKen van het ZAAKTYPE. */
            omschrijving: string;
            /** @description Aanduiding van de mate waarin zaakdossiers van ZAAKen van dit ZAAKTYPE voor de openbaarheid bestemd zijn. Indien de zaak bij het aanmaken geen vertrouwelijkheidaanduiding krijgt, dan wordt deze waarde gezet.
             *
             *     Uitleg bij mogelijke waarden:
             *
             *     * `openbaar` - Openbaar
             *     * `beperkt_openbaar` - Beperkt openbaar
             *     * `intern` - Intern
             *     * `zaakvertrouwelijk` - Zaakvertrouwelijk
             *     * `vertrouwelijk` - Vertrouwelijk
             *     * `confidentieel` - Confidentieel
             *     * `geheim` - Geheim
             *     * `zeer_geheim` - Zeer geheim */
            vertrouwelijkheidaanduiding: components["schemas"]["VertrouwelijkheidaanduidingEnum"];
            /** @description Een omschrijving van hetgeen beoogd is te bereiken met een zaak van dit zaaktype. */
            doel: string;
            /** @description Een omschrijving van de gebeurtenis die leidt tot het starten van een ZAAK van dit ZAAKTYPE. */
            aanleiding: string;
            /** @description Een aanduiding waarmee onderscheid wordt gemaakt tussen ZAAKTYPEn die Intern respectievelijk Extern geïnitieerd worden. Indien van beide sprake kan zijn, dan prevaleert de externe initiatie.
             *
             *     Uitleg bij mogelijke waarden:
             *
             *     * `inkomend` - Inkomend
             *     * `intern` - Intern
             *     * `uitgaand` - Uitgaand */
            indicatieInternOfExtern: components["schemas"]["IndicatieInternOfExternEnum"];
            /** @description Werkwoord dat hoort bij de handeling die de initiator verricht bij dit zaaktype. Meestal 'aanvragen', 'indienen' of 'melden'. Zie ook het IOB model op https://www.gemmaonline.nl/index.php/Imztc_2.1/doc/attribuutsoort/zaaktype.handeling_initiator */
            handelingInitiator: string;
            /** @description Het onderwerp van ZAAKen van dit ZAAKTYPE. In veel gevallen nauw gerelateerd aan de product- of dienstnaam uit de Producten- en Dienstencatalogus (PDC). Bijvoorbeeld: 'Evenementenvergunning', 'Geboorte', 'Klacht'. Zie ook het IOB model op https://www.gemmaonline.nl/index.php/Imztc_2.1/doc/attribuutsoort/zaaktype.onderwerp */
            onderwerp: string;
            /** @description Werkwoord dat hoort bij de handeling die de behandelaar verricht bij het afdoen van ZAAKen van dit ZAAKTYPE. Meestal 'behandelen', 'uitvoeren', 'vaststellen' of 'onderhouden'. Zie ook het IOB model op https://www.gemmaonline.nl/index.php/Imztc_2.1/doc/attribuutsoort/zaaktype.handeling_behandelaar */
            handelingBehandelaar: string;
            /** @description De periode waarbinnen volgens wet- en regelgeving een ZAAK van het ZAAKTYPE afgerond dient te zijn, in kalenderdagen. */
            doorlooptijd: string;
            /**
             * Opschorting/aanhouding mogelijk
             * @description Aanduiding die aangeeft of ZAAKen van dit mogelijk ZAAKTYPE kunnen worden opgeschort en/of aangehouden.
             */
            opschortingEnAanhoudingMogelijk: boolean;
            /** @description Aanduiding die aangeeft of de Doorlooptijd behandeling van ZAAKen van dit ZAAKTYPE kan worden verlengd. */
            verlengingMogelijk: boolean;
            /** @description Aanduiding of (het starten van) een ZAAK dit ZAAKTYPE gepubliceerd moet worden. */
            publicatieIndicatie: boolean;
            /** @description Het product of de dienst die door ZAAKen van dit ZAAKTYPE wordt voortgebracht. */
            productenOfDiensten: string[];
            /** @description Het Referentieproces dat ten grondslag ligt aan dit ZAAKTYPE. */
            referentieproces: components["schemas"]["ReferentieProcesRequest"];
            /** @description De (soort) organisatorische eenheid of (functie van) medewerker die verantwoordelijk is voor de uitvoering van zaken van het ZAAKTYPE. */
            verantwoordelijke: string;
            /**
             * Format: date
             * @description De datum waarop het is ontstaan.
             */
            beginGeldigheid: string;
            /**
             * Format: date
             * @description De datum waarop de (gewijzigde) kenmerken van het ZAAKTYPE geldig zijn geworden
             */
            versiedatum: string;
            /** @description URL-referentie naar de CATALOGUS waartoe dit ZAAKTYPE behoort. */
            catalogus: string;
            /**
             * heeft relevante besluittypen
             * @description URL-referenties naar de BESLUITTYPEN die mogelijk zijn binnen dit ZAAKTYPE.
             */
            besluittypen: string[];
            /** @description De ZAAKTYPEn van zaken die relevant zijn voor zaken van dit ZAAKTYPE. */
            gerelateerdeZaaktypen: components["schemas"]["ZaakTypenRelatieRequest"][];
            /** @default null */
            identificatie: string | null;
            /** @default null */
            omschrijvingGeneriek: string | null;
            /** @default null */
            toelichting: string | null;
            /** @default null */
            servicenorm: string | null;
            /** @default null */
            verlengingstermijn: string | null;
            /** @default null */
            trefwoorden: string[] | null;
            /** @default null */
            publicatietekst: string | null;
            /** @default null */
            verantwoordingsrelatie: string[] | null;
            /** @default null */
            selectielijstProcestype: string | null;
            /** @default null */
            broncatalogus: null | components["schemas"]["BronCatalogusRequest"];
            /** @default null */
            bronzaaktype: null | components["schemas"]["BronZaaktypeRequest"];
            /** @default null */
            eindeGeldigheid: string | null;
            /** @default null */
            deelzaaktypen: (string | null)[] | null;
        };
        /** ExternalServiceError */
        ExternalServiceError: {
            code: string;
            title: string;
            detail: string;
            status: number;
        };
        /**
         * FormaatEnum
         * @enum {unknown}
         */
        FormaatEnum: "datum" | "datum_tijd" | "getal" | "tekst";
        /** FrontendFieldSet */
        FrontendFieldSet: {
            fields: string[];
            span?: number;
        };
        /** HealthCheckSerialisedError */
        HealthCheckSerialisedError: {
            code: string;
            message: string;
            /** @enum {unknown} */
            severity: "error" | "info" | "warning";
            traceback?: string;
        };
        /** HealthCheckSerialisedResult */
        HealthCheckSerialisedResult: {
            check: string;
            errors: components["schemas"]["HealthCheckSerialisedError"][];
            success: boolean;
        };
        /**
         * IndicatieInternOfExternEnum
         * @enum {unknown}
         */
        IndicatieInternOfExternEnum: "extern" | "intern";
        /** InformatieObjectType */
        InformatieObjectType: {
            /** @description URL-referentie naar de CATALOGUS waartoe dit INFORMATIEOBJECTTYPE behoort. */
            catalogus: string;
            /** @description Omschrijving van de aard van informatieobjecten van dit INFORMATIEOBJECTTYPE. */
            omschrijving: string;
            /** @description Aanduiding van de mate waarin informatieobjecten van dit INFORMATIEOBJECTTYPE voor de openbaarheid bestemd zijn.
             *
             *     Uitleg bij mogelijke waarden:
             *
             *     * `openbaar` - Openbaar
             *     * `beperkt_openbaar` - Beperkt openbaar
             *     * `intern` - Intern
             *     * `zaakvertrouwelijk` - Zaakvertrouwelijk
             *     * `vertrouwelijk` - Vertrouwelijk
             *     * `confidentieel` - Confidentieel
             *     * `geheim` - Geheim
             *     * `zeer_geheim` - Zeer geheim */
            vertrouwelijkheidaanduiding: components["schemas"]["VertrouwelijkheidaanduidingEnum"];
            /**
             * Format: date
             * @description De datum waarop het is ontstaan.
             */
            beginGeldigheid: string;
            /**
             * Categorie
             * @description Typering van de aard van informatieobjecten van dit INFORMATIEOBJECTTYPE.
             */
            informatieobjectcategorie: string;
            /** @default null */
            url: string | null;
            /** @default null */
            eindeGeldigheid: string | null;
            /** @default null */
            concept: boolean | null;
            /** @default null */
            besluittypen: string[] | null;
            /** @default null */
            trefwoord: string[] | null;
            /** @default null */
            omschrijvingGeneriek: null | components["schemas"]["OmschrijvingGeneriek"];
            /** @default null */
            zaaktypen: string[] | null;
            /** @default null */
            beginObject: string | null;
            /** @default null */
            eindeObject: string | null;
        };
        /** InformatieObjectTypeRequest */
        InformatieObjectTypeRequest: {
            /** @description URL-referentie naar de CATALOGUS waartoe dit INFORMATIEOBJECTTYPE behoort. */
            catalogus: string;
            /** @description Omschrijving van de aard van informatieobjecten van dit INFORMATIEOBJECTTYPE. */
            omschrijving: string;
            /** @description Aanduiding van de mate waarin informatieobjecten van dit INFORMATIEOBJECTTYPE voor de openbaarheid bestemd zijn.
             *
             *     Uitleg bij mogelijke waarden:
             *
             *     * `openbaar` - Openbaar
             *     * `beperkt_openbaar` - Beperkt openbaar
             *     * `intern` - Intern
             *     * `zaakvertrouwelijk` - Zaakvertrouwelijk
             *     * `vertrouwelijk` - Vertrouwelijk
             *     * `confidentieel` - Confidentieel
             *     * `geheim` - Geheim
             *     * `zeer_geheim` - Zeer geheim */
            vertrouwelijkheidaanduiding: components["schemas"]["VertrouwelijkheidaanduidingEnum"];
            /**
             * Format: date
             * @description De datum waarop het is ontstaan.
             */
            beginGeldigheid: string;
            /**
             * Categorie
             * @description Typering van de aard van informatieobjecten van dit INFORMATIEOBJECTTYPE.
             */
            informatieobjectcategorie: string;
            /** @default null */
            eindeGeldigheid: string | null;
            /** @default null */
            trefwoord: string[] | null;
            /** @default null */
            omschrijvingGeneriek: null | components["schemas"]["OmschrijvingGeneriekRequest"];
        };
        /** InformatieObjectTypeSummary */
        InformatieObjectTypeSummary: {
            actief?: boolean;
            /** @default null */
            eindeGeldigheid: string | null;
            concept?: boolean;
            url: string;
            omschrijving: string;
            vertrouwelijkheidaanduiding: string;
        };
        /** InformatieObjectTypeWithUUID */
        InformatieObjectTypeWithUUID: {
            /** Format: uuid */
            uuid?: string;
            /** @description URL-referentie naar de CATALOGUS waartoe dit INFORMATIEOBJECTTYPE behoort. */
            catalogus: string;
            /** @description Omschrijving van de aard van informatieobjecten van dit INFORMATIEOBJECTTYPE. */
            omschrijving: string;
            /** @description Aanduiding van de mate waarin informatieobjecten van dit INFORMATIEOBJECTTYPE voor de openbaarheid bestemd zijn.
             *
             *     Uitleg bij mogelijke waarden:
             *
             *     * `openbaar` - Openbaar
             *     * `beperkt_openbaar` - Beperkt openbaar
             *     * `intern` - Intern
             *     * `zaakvertrouwelijk` - Zaakvertrouwelijk
             *     * `vertrouwelijk` - Vertrouwelijk
             *     * `confidentieel` - Confidentieel
             *     * `geheim` - Geheim
             *     * `zeer_geheim` - Zeer geheim */
            vertrouwelijkheidaanduiding: components["schemas"]["VertrouwelijkheidaanduidingEnum"];
            /**
             * Format: date
             * @description De datum waarop het is ontstaan.
             */
            beginGeldigheid: string;
            /**
             * Categorie
             * @description Typering van de aard van informatieobjecten van dit INFORMATIEOBJECTTYPE.
             */
            informatieobjectcategorie: string;
            /** @default null */
            url: string | null;
            /** @default null */
            eindeGeldigheid: string | null;
            /** @default null */
            concept: boolean | null;
            /** @default null */
            besluittypen: string[] | null;
            /** @default null */
            trefwoord: string[] | null;
            /** @default null */
            omschrijvingGeneriek: null | components["schemas"]["OmschrijvingGeneriek"];
            /** @default null */
            zaaktypen: string[] | null;
            /** @default null */
            beginObject: string | null;
            /** @default null */
            eindeObject: string | null;
        };
        /** InvalidParam */
        InvalidParam: {
            /** @description Naam van het veld met ongeldige gegevens */
            name: string;
            /** @description Systeemcode die het type fout aangeeft */
            code: string;
            /** @description Uitleg wat er precies fout is met de gegevens */
            reason: string;
        };
        /**
         * LAXProcesType
         * @description Overrides ProcesType ignoring "toelichting" min_length as restriction seems incorrect.
         */
        LAXProcesType: {
            toelichting: string;
            /** @default null */
            url: string | null;
            /**
             * Procestypenummer
             * @description Nummer van de selectielijstcategorie
             */
            nummer: number;
            /**
             * Jaar
             * @description Het jaartal waartoe dit ProcesType behoort
             */
            jaar: number;
            /**
             * Procestypenaam
             * @description Benaming van het procestype
             */
            naam: string;
            /**
             * Procestypeomschrijving
             * @description Omschrijving van het procestype
             */
            omschrijving: string;
            /**
             * Procesobject
             * @description Object waar de uitvoering van het proces op van toepassing is en waarvan de bestaans- of geldigheidsduur eventueel van belang is bij het bepalen van de start van de bewaartermijn
             */
            procesobject: string;
        };
        None: null;
        /**
         * OBField
         * @description Used by frontend to draw list views
         */
        OBField: {
            name: string;
            type: components["schemas"]["OBFieldType"];
            filterValue?: unknown;
            filterLookup?: string;
            options?: components["schemas"]["OBOption"][];
            /** @default false */
            editable: boolean;
            required?: boolean;
        };
        /**
         * OBFieldType
         * @description Used by frontend to decide widget etc.
         * @enum {unknown}
         */
        OBFieldType: "boolean" | "date" | "duration" | "number" | "string" | "text";
        /**
         * OBList[BesluitTypeWithUUID]
         * @description Used to draw list views on the frontend.
         */
        OBList_BesluitTypeWithUUID_: {
            fields: components["schemas"]["OBField"][];
            pagination: components["schemas"]["OBPagination"];
            results: components["schemas"]["BesluitTypeWithUUID"][];
        };
        /**
         * OBList[EigenschapWithUUID]
         * @description Used to draw list views on the frontend.
         */
        OBList_EigenschapWithUUID_: {
            fields: components["schemas"]["OBField"][];
            pagination: components["schemas"]["OBPagination"];
            results: components["schemas"]["EigenschapWithUUID"][];
        };
        /**
         * OBList[InformatieObjectTypeSummary]
         * @description Used to draw list views on the frontend.
         */
        OBList_InformatieObjectTypeSummary_: {
            fields: components["schemas"]["OBField"][];
            pagination: components["schemas"]["OBPagination"];
            results: components["schemas"]["InformatieObjectTypeSummary"][];
        };
        /**
         * OBList[ResultaatTypeWithUUID]
         * @description Used to draw list views on the frontend.
         */
        OBList_ResultaatTypeWithUUID_: {
            fields: components["schemas"]["OBField"][];
            pagination: components["schemas"]["OBPagination"];
            results: components["schemas"]["ResultaatTypeWithUUID"][];
        };
        /**
         * OBList[RolTypeWithUUID]
         * @description Used to draw list views on the frontend.
         */
        OBList_RolTypeWithUUID_: {
            fields: components["schemas"]["OBField"][];
            pagination: components["schemas"]["OBPagination"];
            results: components["schemas"]["RolTypeWithUUID"][];
        };
        /**
         * OBList[StatusTypeWithUUID]
         * @description Used to draw list views on the frontend.
         */
        OBList_StatusTypeWithUUID_: {
            fields: components["schemas"]["OBField"][];
            pagination: components["schemas"]["OBPagination"];
            results: components["schemas"]["StatusTypeWithUUID"][];
        };
        /**
         * OBList[ZaakObjectTypeWithUUID]
         * @description Used to draw list views on the frontend.
         */
        OBList_ZaakObjectTypeWithUUID_: {
            fields: components["schemas"]["OBField"][];
            pagination: components["schemas"]["OBPagination"];
            results: components["schemas"]["ZaakObjectTypeWithUUID"][];
        };
        /**
         * OBList[ZaakTypeInformatieObjectType]
         * @description Used to draw list views on the frontend.
         */
        OBList_ZaakTypeInformatieObjectType_: {
            fields: components["schemas"]["OBField"][];
            pagination: components["schemas"]["OBPagination"];
            results: components["schemas"]["ZaakTypeInformatieObjectType"][];
        };
        /**
         * OBList[ZaakTypeSummary]
         * @description Used to draw list views on the frontend.
         */
        OBList_ZaakTypeSummary_: {
            fields: components["schemas"]["OBField"][];
            pagination: components["schemas"]["OBPagination"];
            results: components["schemas"]["ZaakTypeSummary"][];
        };
        /**
         * OBOption
         * @description The label, value pair for when a `T` has to be presented in some selection
         */
        OBOption: {
            label: string;
            value: unknown;
        };
        /**
         * OBOption[str]
         * @description The label, value pair for when a `T` has to be presented in some selection
         */
        OBOption_str_: {
            label: string;
            value: string;
        };
        /** OBPagination */
        OBPagination: {
            count: number;
            page: number;
            pageSize: number;
            next: string | null;
            previous: string | null;
        };
        /** OIDCInfo */
        OIDCInfo: {
            enabled: boolean;
            loginUrl?: string;
        };
        /** ObjectType */
        ObjectType: {
            /** @description Name of the object type */
            name: string;
            /** @description Plural name of the object type */
            namePlural: string;
            /** @default null */
            url: string | null;
            /** @default null */
            uuid: string | null;
            /** @default null */
            description: string | null;
            /** @default null */
            dataClassification: components["schemas"]["DataClassificationEnum"] | null;
            /** @default null */
            maintainerOrganization: string | null;
            /** @default null */
            maintainerDepartment: string | null;
            /** @default null */
            contactPerson: string | null;
            /** @default null */
            contactEmail: string | null;
            /** @default null */
            source: string | null;
            /** @default null */
            updateFrequency: components["schemas"]["UpdateFrequencyEnum"] | null;
            /** @default null */
            providerOrganization: string | null;
            /** @default null */
            documentationUrl: string | null;
            /** @default null */
            labels: {
                [key: string]: string | number | Record<string, never>;
            } | null;
            /** @default null */
            createdAt: string | null;
            /** @default null */
            modifiedAt: string | null;
            /** @default null */
            allowGeometry: boolean | null;
            /** @default null */
            versions: string[] | null;
        };
        /**
         * ObjecttypeEnum
         * @enum {unknown}
         */
        ObjecttypeEnum: "" | "adres" | "besluit" | "buurt" | "enkelvoudig_document" | "gemeente" | "gemeentelijke_openbare_ruimte" | "huishouden" | "inrichtingselement" | "kadastrale_onroerende_zaak" | "kunstwerkdeel" | "maatschappelijke_activiteit" | "medewerker" | "natuurlijk_persoon" | "niet_natuurlijk_persoon" | "openbare_ruimte" | "organisatorische_eenheid" | "overige" | "pand" | "spoorbaandeel" | "status" | "terrein_gebouwd_object" | "terreindeel" | "vestiging" | "waterdeel" | "wegdeel" | "wijk" | "woonplaats" | "woz_deelobject" | "woz_object" | "woz_waarde" | "zakelijk_recht";
        /** OmschrijvingGeneriek */
        OmschrijvingGeneriek: {
            /** @description Algemeen gehanteerde omschrijving van het type informatieobject. */
            informatieobjecttypeOmschrijvingGeneriek: string;
            /**
             * Definitie
             * @description Nauwkeurige beschrijving van het generieke type informatieobject
             */
            definitieInformatieobjecttypeOmschrijvingGeneriek: string;
            /**
             * Herkomst
             * @description De naam van de waardenverzameling, of van de beherende organisatie daarvan, waaruit de waarde is overgenomen.
             */
            herkomstInformatieobjecttypeOmschrijvingGeneriek: string;
            /**
             * Hierarchie
             * @description De plaats in de rangorde van het informatieobjecttype.
             */
            hierarchieInformatieobjecttypeOmschrijvingGeneriek: string;
            /** @default null */
            opmerkingInformatieobjecttypeOmschrijvingGeneriek: string | null;
        };
        /**
         * OmschrijvingGeneriek4
         * @enum {unknown}
         */
        OmschrijvingGeneriek4: "adviseur" | "behandelaar" | "belanghebbende" | "beslisser" | "initiator" | "klantcontacter" | "mede_initiator" | "zaakcoordinator";
        /**
         * OmschrijvingGeneriekEnum
         * @enum {unknown}
         */
        OmschrijvingGeneriekEnum: "adviseur" | "behandelaar" | "belanghebbende" | "beslisser" | "initiator" | "klantcontacter" | "mede_initiator" | "zaakcoordinator";
        /** OmschrijvingGeneriekRequest */
        OmschrijvingGeneriekRequest: {
            /** @description Algemeen gehanteerde omschrijving van het type informatieobject. */
            informatieobjecttypeOmschrijvingGeneriek: string;
            /**
             * Definitie
             * @description Nauwkeurige beschrijving van het generieke type informatieobject
             */
            definitieInformatieobjecttypeOmschrijvingGeneriek: string;
            /**
             * Herkomst
             * @description De naam van de waardenverzameling, of van de beherende organisatie daarvan, waaruit de waarde is overgenomen.
             */
            herkomstInformatieobjecttypeOmschrijvingGeneriek: string;
            /**
             * Hierarchie
             * @description De plaats in de rangorde van het informatieobjecttype.
             */
            hierarchieInformatieobjecttypeOmschrijvingGeneriek: string;
            /** @default null */
            opmerkingInformatieobjecttypeOmschrijvingGeneriek: string | null;
        };
        /** OptionalExpandableZaakTypeRequest */
        OptionalExpandableZaakTypeRequest: {
            /**
             * ZaakTypeExtension
             * @default {}
             */
            _expand: {
                besluittypen?: components["schemas"]["BesluitTypeWithUUID"][];
                statustypen?: components["schemas"]["StatusTypeWithUUID"][];
                resultaattypen?: components["schemas"]["ResultaatTypeWithUUID"][];
                eigenschappen?: components["schemas"]["EigenschapWithUUID"][];
                informatieobjecttypen?: components["schemas"]["InformatieObjectTypeWithUUID"][];
                roltypen?: components["schemas"]["RolTypeWithUUID"][];
                deelzaaktypen?: components["schemas"]["ZaakTypeWithUUID"][];
                zaakobjecttypen?: components["schemas"]["ExpandableZaakObjectTypeWithUUID"][];
                selectielijstProcestype?: components["schemas"]["LAXProcesType"];
                zaaktypeinformatieobjecttypen?: components["schemas"]["ZaakTypeInformatieObjectTypeWithUUID"][];
            };
            /** @description Omschrijving van de aard van ZAAKen van het ZAAKTYPE. */
            omschrijving?: string;
            /** @description Aanduiding van de mate waarin zaakdossiers van ZAAKen van dit ZAAKTYPE voor de openbaarheid bestemd zijn. Indien de zaak bij het aanmaken geen vertrouwelijkheidaanduiding krijgt, dan wordt deze waarde gezet.
             *
             *     Uitleg bij mogelijke waarden:
             *
             *     * `openbaar` - Openbaar
             *     * `beperkt_openbaar` - Beperkt openbaar
             *     * `intern` - Intern
             *     * `zaakvertrouwelijk` - Zaakvertrouwelijk
             *     * `vertrouwelijk` - Vertrouwelijk
             *     * `confidentieel` - Confidentieel
             *     * `geheim` - Geheim
             *     * `zeer_geheim` - Zeer geheim */
            vertrouwelijkheidaanduiding?: components["schemas"]["VertrouwelijkheidaanduidingEnum"];
            /** @description Een omschrijving van hetgeen beoogd is te bereiken met een zaak van dit zaaktype. */
            doel?: string;
            /** @description Een omschrijving van de gebeurtenis die leidt tot het starten van een ZAAK van dit ZAAKTYPE. */
            aanleiding?: string;
            /** @description Een aanduiding waarmee onderscheid wordt gemaakt tussen ZAAKTYPEn die Intern respectievelijk Extern geïnitieerd worden. Indien van beide sprake kan zijn, dan prevaleert de externe initiatie.
             *
             *     Uitleg bij mogelijke waarden:
             *
             *     * `inkomend` - Inkomend
             *     * `intern` - Intern
             *     * `uitgaand` - Uitgaand */
            indicatieInternOfExtern?: components["schemas"]["IndicatieInternOfExternEnum"];
            /** @description Werkwoord dat hoort bij de handeling die de initiator verricht bij dit zaaktype. Meestal 'aanvragen', 'indienen' of 'melden'. Zie ook het IOB model op https://www.gemmaonline.nl/index.php/Imztc_2.1/doc/attribuutsoort/zaaktype.handeling_initiator */
            handelingInitiator?: string;
            /** @description Het onderwerp van ZAAKen van dit ZAAKTYPE. In veel gevallen nauw gerelateerd aan de product- of dienstnaam uit de Producten- en Dienstencatalogus (PDC). Bijvoorbeeld: 'Evenementenvergunning', 'Geboorte', 'Klacht'. Zie ook het IOB model op https://www.gemmaonline.nl/index.php/Imztc_2.1/doc/attribuutsoort/zaaktype.onderwerp */
            onderwerp?: string;
            /** @description Werkwoord dat hoort bij de handeling die de behandelaar verricht bij het afdoen van ZAAKen van dit ZAAKTYPE. Meestal 'behandelen', 'uitvoeren', 'vaststellen' of 'onderhouden'. Zie ook het IOB model op https://www.gemmaonline.nl/index.php/Imztc_2.1/doc/attribuutsoort/zaaktype.handeling_behandelaar */
            handelingBehandelaar?: string;
            /** @description De periode waarbinnen volgens wet- en regelgeving een ZAAK van het ZAAKTYPE afgerond dient te zijn, in kalenderdagen. */
            doorlooptijd?: string;
            /**
             * Opschorting/aanhouding mogelijk
             * @description Aanduiding die aangeeft of ZAAKen van dit mogelijk ZAAKTYPE kunnen worden opgeschort en/of aangehouden.
             */
            opschortingEnAanhoudingMogelijk?: boolean;
            /** @description Aanduiding die aangeeft of de Doorlooptijd behandeling van ZAAKen van dit ZAAKTYPE kan worden verlengd. */
            verlengingMogelijk?: boolean;
            /** @description Aanduiding of (het starten van) een ZAAK dit ZAAKTYPE gepubliceerd moet worden. */
            publicatieIndicatie?: boolean;
            /** @description Het product of de dienst die door ZAAKen van dit ZAAKTYPE wordt voortgebracht. */
            productenOfDiensten?: string[];
            /** @description Het Referentieproces dat ten grondslag ligt aan dit ZAAKTYPE. */
            referentieproces?: components["schemas"]["ReferentieProcesRequest"];
            /** @description De (soort) organisatorische eenheid of (functie van) medewerker die verantwoordelijk is voor de uitvoering van zaken van het ZAAKTYPE. */
            verantwoordelijke?: string;
            /**
             * Format: date
             * @description De datum waarop het is ontstaan.
             */
            beginGeldigheid?: string;
            /**
             * Format: date
             * @description De datum waarop de (gewijzigde) kenmerken van het ZAAKTYPE geldig zijn geworden
             */
            versiedatum?: string;
            /** @description URL-referentie naar de CATALOGUS waartoe dit ZAAKTYPE behoort. */
            catalogus?: string;
            /**
             * heeft relevante besluittypen
             * @description URL-referenties naar de BESLUITTYPEN die mogelijk zijn binnen dit ZAAKTYPE.
             */
            besluittypen?: string[];
            /** @description De ZAAKTYPEn van zaken die relevant zijn voor zaken van dit ZAAKTYPE. */
            gerelateerdeZaaktypen?: components["schemas"]["ZaakTypenRelatieRequest"][];
            /** @default null */
            identificatie: string | null;
            /** @default null */
            omschrijvingGeneriek: string | null;
            /** @default null */
            toelichting: string | null;
            /** @default null */
            servicenorm: string | null;
            /** @default null */
            verlengingstermijn: string | null;
            /** @default null */
            trefwoorden: string[] | null;
            /** @default null */
            publicatietekst: string | null;
            /** @default null */
            verantwoordingsrelatie: string[] | null;
            /** @default null */
            selectielijstProcestype: string | null;
            /** @default null */
            broncatalogus: null | components["schemas"]["BronCatalogusRequest"];
            /** @default null */
            bronzaaktype: null | components["schemas"]["BronZaaktypeRequest"];
            /** @default null */
            eindeGeldigheid: string | null;
            /** @default null */
            deelzaaktypen: (string | null)[] | null;
        };
        /** PatchedBesluitTypeRequest */
        PatchedPatchedBesluitTypeRequest: {
            /** @default null */
            catalogus: string | null;
            /** @default null */
            omschrijving: string | null;
            /** @default null */
            omschrijvingGeneriek: string | null;
            /** @default null */
            besluitcategorie: string | null;
            /** @default null */
            reactietermijn: string | null;
            /** @default null */
            publicatieIndicatie: boolean | null;
            /** @default null */
            publicatietekst: string | null;
            /** @default null */
            publicatietermijn: string | null;
            /** @default null */
            toelichting: string | null;
            /** @default null */
            informatieobjecttypen: string[] | null;
            /** @default null */
            beginGeldigheid: string | null;
            /** @default null */
            eindeGeldigheid: string | null;
        };
        /** PatchedEigenschapRequest */
        PatchedPatchedEigenschapRequest: {
            /** @description De naam van de EIGENSCHAP */
            naam?: string;
            /** @description De beschrijving van de betekenis van deze EIGENSCHAP */
            definitie?: string;
            specificatie?: components["schemas"]["EigenschapSpecificatieRequest"];
            /** @description Een toelichting op deze EIGENSCHAP en het belang hiervan voor zaken van dit ZAAKTYPE. */
            toelichting?: string;
            /** @description URL-referentie naar het ZAAKTYPE van de ZAAKen waarvoor deze EIGENSCHAP van belang is. */
            zaaktype?: string;
            /** @description Status type moet (onder andere) deze EIGENSCHAP hebben, voordat een STATUS van het STATUSTYPE kan worden gezet. */
            statustype?: string;
            /**
             * Format: date
             * @description De datum waarop het is ontstaan.
             */
            beginGeldigheid?: string;
            /**
             * Format: date
             * @description De datum waarop het is opgeheven.
             */
            eindeGeldigheid?: string;
        };
        /** PatchedInformatieObjectTypeRequest */
        PatchedPatchedInformatieObjectTypeRequest: {
            /** @default null */
            catalogus: string | null;
            /** @default null */
            omschrijving: string | null;
            /** @default null */
            vertrouwelijkheidaanduiding: components["schemas"]["VertrouwelijkheidaanduidingEnum"] | null;
            /** @default null */
            beginGeldigheid: string | null;
            /** @default null */
            eindeGeldigheid: string | null;
            /** @default null */
            informatieobjectcategorie: string | null;
            /** @default null */
            trefwoord: string[] | null;
            /** @default null */
            omschrijvingGeneriek: null | components["schemas"]["OmschrijvingGeneriekRequest"];
        };
        /** PatchedResultaatTypeRequest */
        PatchedPatchedResultaatTypeRequest: {
            /** @default null */
            zaaktype: string | null;
            /** @default null */
            omschrijving: string | null;
            /** @default null */
            resultaattypeomschrijving: string | null;
            /** @default null */
            selectielijstklasse: string | null;
            /** @default null */
            toelichting: string | null;
            /** @default null */
            archiefnominatie: components["schemas"]["ArchiefnominatieEnum"] | null;
            /** @default null */
            archiefactietermijn: string | null;
            /** @default null */
            brondatumArchiefprocedure: null | components["schemas"]["BrondatumArchiefprocedureRequest"];
            /** @default null */
            procesobjectaard: string | null;
            /** @default null */
            indicatieSpecifiek: boolean | null;
            /** @default null */
            procestermijn: string | null;
            /** @default null */
            besluittypen: (string | null)[] | null;
            /** @default null */
            informatieobjecttypen: (string | null)[] | null;
            /** @default null */
            beginGeldigheid: string | null;
            /** @default null */
            eindeGeldigheid: string | null;
        };
        /** PatchedRolTypeRequest */
        PatchedPatchedRolTypeRequest: {
            /** @default null */
            zaaktype: string | null;
            /** @default null */
            omschrijving: string | null;
            /** @default null */
            omschrijvingGeneriek: components["schemas"]["OmschrijvingGeneriekEnum"] | null;
            /** @default null */
            beginGeldigheid: string | null;
            /** @default null */
            eindeGeldigheid: string | null;
        };
        /** PatchedStatusTypeRequest */
        PatchedPatchedStatusTypeRequest: {
            /** @default null */
            omschrijving: string | null;
            /** @default null */
            omschrijvingGeneriek: string | null;
            /** @default null */
            statustekst: string | null;
            /** @default null */
            zaaktype: string | null;
            /** @default null */
            volgnummer: number | null;
            /** @default null */
            informeren: boolean | null;
            /** @default null */
            doorlooptijd: string | null;
            /** @default null */
            toelichting: string | null;
            /** @default null */
            checklistitemStatustype: components["schemas"]["CheckListItemRequest"][] | null;
            /** @default null */
            beginGeldigheid: string | null;
            /** @default null */
            eindeGeldigheid: string | null;
        };
        /** PatchedZaakObjectTypeRequest */
        PatchedPatchedZaakObjectTypeRequest: {
            /** @default null */
            anderObjecttype: boolean | null;
            /** @default null */
            objecttype: string | null;
            /** @default null */
            relatieOmschrijving: string | null;
            /** @default null */
            zaaktype: string | null;
            /** @default null */
            statustype: string | null;
            /** @default null */
            beginGeldigheid: string | null;
            /** @default null */
            eindeGeldigheid: string | null;
        };
        /** PatchedZaakTypeInformatieObjectTypeRequest */
        PatchedPatchedZaakTypeInformatieObjectTypeRequest: {
            /** @default null */
            zaaktype: string | null;
            /** @default null */
            informatieobjecttype: string | null;
            /** @default null */
            volgnummer: number | null;
            /** @default null */
            richting: components["schemas"]["RichtingEnum"] | null;
            /** @default null */
            statustype: string | null;
        };
        /** PatchedZaakTypeRequest */
        PatchedPatchedZaakTypeRequest: {
            /** @default null */
            identificatie: string | null;
            /** @default null */
            omschrijving: string | null;
            /** @default null */
            omschrijvingGeneriek: string | null;
            /** @default null */
            vertrouwelijkheidaanduiding: components["schemas"]["VertrouwelijkheidaanduidingEnum"] | null;
            /** @default null */
            doel: string | null;
            /** @default null */
            aanleiding: string | null;
            /** @default null */
            toelichting: string | null;
            /** @default null */
            indicatieInternOfExtern: components["schemas"]["IndicatieInternOfExternEnum"] | null;
            /** @default null */
            handelingInitiator: string | null;
            /** @default null */
            onderwerp: string | null;
            /** @default null */
            handelingBehandelaar: string | null;
            /** @default null */
            doorlooptijd: string | null;
            /** @default null */
            servicenorm: string | null;
            /** @default null */
            opschortingEnAanhoudingMogelijk: boolean | null;
            /** @default null */
            verlengingMogelijk: boolean | null;
            /** @default null */
            verlengingstermijn: string | null;
            /** @default null */
            trefwoorden: string[] | null;
            /** @default null */
            publicatieIndicatie: boolean | null;
            /** @default null */
            publicatietekst: string | null;
            /** @default null */
            verantwoordingsrelatie: string[] | null;
            /** @default null */
            productenOfDiensten: string[] | null;
            /** @default null */
            selectielijstProcestype: string | null;
            /** @default null */
            referentieproces: null | components["schemas"]["ReferentieProcesRequest"];
            /** @default null */
            verantwoordelijke: string | null;
            /** @default null */
            broncatalogus: null | components["schemas"]["BronCatalogusRequest"];
            /** @default null */
            bronzaaktype: null | components["schemas"]["BronZaaktypeRequest"];
            /** @default null */
            beginGeldigheid: string | null;
            /** @default null */
            eindeGeldigheid: string | null;
            /** @default null */
            versiedatum: string | null;
            /** @default null */
            catalogus: string | null;
            /** @default null */
            besluittypen: string[] | null;
            /** @default null */
            deelzaaktypen: (string | null)[] | null;
            /** @default null */
            gerelateerdeZaaktypen: components["schemas"]["ZaakTypenRelatieRequest"][] | null;
        };
        /** ReferentieProces */
        ReferentieProces: {
            /**
             * Referentieprocesnaam
             * @description De naam van het Referentieproces. Zie ook de Procesarchitectuur Referentieprocessen op https://www.gemmaonline.nl/index.php/Procesarchitectuur_Referentieprocessen
             */
            naam: string;
            /** @default null */
            link: string | null;
        };
        /** ReferentieProcesRequest */
        ReferentieProcesRequest: {
            /**
             * Referentieprocesnaam
             * @description De naam van het Referentieproces. Zie ook de Procesarchitectuur Referentieprocessen op https://www.gemmaonline.nl/index.php/Procesarchitectuur_Referentieprocessen
             */
            naam: string;
            /** @default null */
            link: string | null;
        };
        /** ResultaatType */
        ResultaatType: {
            /**
             * is van
             * @description URL-referentie naar het ZAAKTYPE van ZAAKen waarin resultaten van dit RESULTAATTYPE bereikt kunnen worden.
             */
            zaaktype: string;
            /** @description Omschrijving van de aard van resultaten van het RESULTAATTYPE. */
            omschrijving: string;
            /** @description Algemeen gehanteerde omschrijving van de aard van resultaten van het RESULTAATTYPE. Dit moet een URL-referentie zijn naar de referenlijst van generieke resultaattypeomschrijvingen. Im ImZTC heet dit 'omschrijving generiek' */
            resultaattypeomschrijving: string;
            /** @description URL-referentie naar de, voor het archiefregime bij het RESULTAATTYPE relevante, categorie in de Selectielijst Archiefbescheiden (RESULTAAT in de Selectielijst API) van de voor het ZAAKTYPE verantwoordelijke overheidsorganisatie. */
            selectielijstklasse: string;
            /** @default null */
            url: string | null;
            /** @default null */
            zaaktypeIdentificatie: string | null;
            /** @default null */
            omschrijvingGeneriek: string | null;
            /** @default null */
            toelichting: string | null;
            /** @default null */
            archiefnominatie: components["schemas"]["ArchiefnominatieEnum"] | null;
            /** @default null */
            archiefactietermijn: string | null;
            /** @default null */
            brondatumArchiefprocedure: null | components["schemas"]["BrondatumArchiefprocedure"];
            /** @default null */
            procesobjectaard: string | null;
            /** @default null */
            indicatieSpecifiek: boolean | null;
            /** @default null */
            procestermijn: string | null;
            /** @default null */
            catalogus: string | null;
            /** @default null */
            besluittypen: (string | null)[] | null;
            /** @default null */
            besluittypeOmschrijving: string[] | null;
            /** @default null */
            informatieobjecttypen: (string | null)[] | null;
            /** @default null */
            informatieobjecttypeOmschrijving: string[] | null;
            /** @default null */
            beginGeldigheid: string | null;
            /** @default null */
            eindeGeldigheid: string | null;
            /** @default null */
            beginObject: string | null;
            /** @default null */
            eindeObject: string | null;
        };
        /** ResultaatTypeRequest */
        ResultaatTypeRequest: {
            /**
             * is van
             * @description URL-referentie naar het ZAAKTYPE van ZAAKen waarin resultaten van dit RESULTAATTYPE bereikt kunnen worden.
             */
            zaaktype: string;
            /** @description Omschrijving van de aard van resultaten van het RESULTAATTYPE. */
            omschrijving: string;
            /** @description Algemeen gehanteerde omschrijving van de aard van resultaten van het RESULTAATTYPE. Dit moet een URL-referentie zijn naar de referenlijst van generieke resultaattypeomschrijvingen. Im ImZTC heet dit 'omschrijving generiek' */
            resultaattypeomschrijving: string;
            /** @description URL-referentie naar de, voor het archiefregime bij het RESULTAATTYPE relevante, categorie in de Selectielijst Archiefbescheiden (RESULTAAT in de Selectielijst API) van de voor het ZAAKTYPE verantwoordelijke overheidsorganisatie. */
            selectielijstklasse: string;
            /** @default null */
            toelichting: string | null;
            /** @default null */
            archiefnominatie: components["schemas"]["ArchiefnominatieEnum"] | null;
            /** @default null */
            archiefactietermijn: string | null;
            /** @default null */
            brondatumArchiefprocedure: null | components["schemas"]["BrondatumArchiefprocedureRequest"];
            /** @default null */
            procesobjectaard: string | null;
            /** @default null */
            indicatieSpecifiek: boolean | null;
            /** @default null */
            procestermijn: string | null;
            /** @default null */
            besluittypen: (string | null)[] | null;
            /** @default null */
            informatieobjecttypen: (string | null)[] | null;
            /** @default null */
            beginGeldigheid: string | null;
            /** @default null */
            eindeGeldigheid: string | null;
        };
        /** ResultaatTypeWithUUID */
        ResultaatTypeWithUUID: {
            /** @description Algemeen gehanteerde omschrijving van de aard van resultaten van het RESULTAATTYPE. Dit moet een URL-referentie zijn naar de referenlijst van generieke resultaattypeomschrijvingen. Im ImZTC heet dit 'omschrijving generiek' */
            resultaattypeomschrijving: string;
            /** @description URL-referentie naar de, voor het archiefregime bij het RESULTAATTYPE relevante, categorie in de Selectielijst Archiefbescheiden (RESULTAAT in de Selectielijst API) van de voor het ZAAKTYPE verantwoordelijke overheidsorganisatie. */
            selectielijstklasse: string;
            /** Format: uuid */
            uuid?: string;
            /**
             * is van
             * @description URL-referentie naar het ZAAKTYPE van ZAAKen waarin resultaten van dit RESULTAATTYPE bereikt kunnen worden.
             */
            zaaktype: string;
            /** @description Omschrijving van de aard van resultaten van het RESULTAATTYPE. */
            omschrijving: string;
            /** @default null */
            url: string | null;
            /** @default null */
            zaaktypeIdentificatie: string | null;
            /** @default null */
            omschrijvingGeneriek: string | null;
            /** @default null */
            toelichting: string | null;
            /** @default null */
            archiefnominatie: components["schemas"]["ArchiefnominatieEnum"] | null;
            /** @default null */
            archiefactietermijn: string | null;
            /** @default null */
            brondatumArchiefprocedure: null | components["schemas"]["BrondatumArchiefprocedure"];
            /** @default null */
            procesobjectaard: string | null;
            /** @default null */
            indicatieSpecifiek: boolean | null;
            /** @default null */
            procestermijn: string | null;
            /** @default null */
            catalogus: string | null;
            /** @default null */
            besluittypen: (string | null)[] | null;
            /** @default null */
            besluittypeOmschrijving: string[] | null;
            /** @default null */
            informatieobjecttypen: (string | null)[] | null;
            /** @default null */
            informatieobjecttypeOmschrijving: string[] | null;
            /** @default null */
            beginGeldigheid: string | null;
            /** @default null */
            eindeGeldigheid: string | null;
            /** @default null */
            beginObject: string | null;
            /** @default null */
            eindeObject: string | null;
        };
        /**
         * Richting
         * @enum {unknown}
         */
        Richting: "inkomend" | "intern" | "uitgaand";
        /**
         * RichtingEnum
         * @enum {unknown}
         */
        RichtingEnum: "inkomend" | "intern" | "uitgaand";
        /** RolType */
        RolType: {
            /** @description URL-referentie naar het ZAAKTYPE waar deze ROLTYPEn betrokken kunnen zijn. */
            zaaktype: string;
            /** @description Omschrijving van de aard van de ROL. */
            omschrijving: string;
            /** @description Algemeen gehanteerde omschrijving van de aard van de ROL.
             *
             *     Uitleg bij mogelijke waarden:
             *
             *     * `adviseur` - (Adviseur) Kennis in dienst stellen van de behandeling van (een deel van) een zaak.
             *     * `behandelaar` - (Behandelaar) De vakinhoudelijke behandeling doen van (een deel van) een zaak.
             *     * `belanghebbende` - (Belanghebbende) Vanuit eigen en objectief belang rechtstreeks betrokken zijn bij de behandeling en/of de uitkomst van een zaak.
             *     * `beslisser` - (Beslisser) Nemen van besluiten die voor de uitkomst van een zaak noodzakelijk zijn.
             *     * `initiator` - (Initiator) Aanleiding geven tot de start van een zaak ..
             *     * `klantcontacter` - (Klantcontacter) Het eerste aanspreekpunt zijn voor vragen van burgers en bedrijven ..
             *     * `zaakcoordinator` - (Zaakcoördinator) Er voor zorg dragen dat de behandeling van de zaak in samenhang uitgevoerd wordt conform de daarover gemaakte afspraken.
             *     * `mede_initiator` - (Mede-initiator)  */
            omschrijvingGeneriek: components["schemas"]["OmschrijvingGeneriekEnum"];
            /** @default null */
            url: string | null;
            /** @default null */
            zaaktypeIdentificatie: string | null;
            /** @default null */
            catalogus: string | null;
            /** @default null */
            beginGeldigheid: string | null;
            /** @default null */
            eindeGeldigheid: string | null;
            /** @default null */
            beginObject: string | null;
            /** @default null */
            eindeObject: string | null;
        };
        /** RolTypeRequest */
        RolTypeRequest: {
            /** @description URL-referentie naar het ZAAKTYPE waar deze ROLTYPEn betrokken kunnen zijn. */
            zaaktype: string;
            /** @description Omschrijving van de aard van de ROL. */
            omschrijving: string;
            /** @description Algemeen gehanteerde omschrijving van de aard van de ROL.
             *
             *     Uitleg bij mogelijke waarden:
             *
             *     * `adviseur` - (Adviseur) Kennis in dienst stellen van de behandeling van (een deel van) een zaak.
             *     * `behandelaar` - (Behandelaar) De vakinhoudelijke behandeling doen van (een deel van) een zaak.
             *     * `belanghebbende` - (Belanghebbende) Vanuit eigen en objectief belang rechtstreeks betrokken zijn bij de behandeling en/of de uitkomst van een zaak.
             *     * `beslisser` - (Beslisser) Nemen van besluiten die voor de uitkomst van een zaak noodzakelijk zijn.
             *     * `initiator` - (Initiator) Aanleiding geven tot de start van een zaak ..
             *     * `klantcontacter` - (Klantcontacter) Het eerste aanspreekpunt zijn voor vragen van burgers en bedrijven ..
             *     * `zaakcoordinator` - (Zaakcoördinator) Er voor zorg dragen dat de behandeling van de zaak in samenhang uitgevoerd wordt conform de daarover gemaakte afspraken.
             *     * `mede_initiator` - (Mede-initiator)  */
            omschrijvingGeneriek: components["schemas"]["OmschrijvingGeneriekEnum"];
            /** @default null */
            beginGeldigheid: string | null;
            /** @default null */
            eindeGeldigheid: string | null;
        };
        /** RolTypeWithUUID */
        RolTypeWithUUID: {
            /** Format: uuid */
            uuid?: string;
            /** @description URL-referentie naar het ZAAKTYPE waar deze ROLTYPEn betrokken kunnen zijn. */
            zaaktype: string;
            /** @description Omschrijving van de aard van de ROL. */
            omschrijving: string;
            /** @description Algemeen gehanteerde omschrijving van de aard van de ROL.
             *
             *     Uitleg bij mogelijke waarden:
             *
             *     * `adviseur` - (Adviseur) Kennis in dienst stellen van de behandeling van (een deel van) een zaak.
             *     * `behandelaar` - (Behandelaar) De vakinhoudelijke behandeling doen van (een deel van) een zaak.
             *     * `belanghebbende` - (Belanghebbende) Vanuit eigen en objectief belang rechtstreeks betrokken zijn bij de behandeling en/of de uitkomst van een zaak.
             *     * `beslisser` - (Beslisser) Nemen van besluiten die voor de uitkomst van een zaak noodzakelijk zijn.
             *     * `initiator` - (Initiator) Aanleiding geven tot de start van een zaak ..
             *     * `klantcontacter` - (Klantcontacter) Het eerste aanspreekpunt zijn voor vragen van burgers en bedrijven ..
             *     * `zaakcoordinator` - (Zaakcoördinator) Er voor zorg dragen dat de behandeling van de zaak in samenhang uitgevoerd wordt conform de daarover gemaakte afspraken.
             *     * `mede_initiator` - (Mede-initiator)  */
            omschrijvingGeneriek: components["schemas"]["OmschrijvingGeneriekEnum"];
            /** @default null */
            url: string | null;
            /** @default null */
            zaaktypeIdentificatie: string | null;
            /** @default null */
            catalogus: string | null;
            /** @default null */
            beginGeldigheid: string | null;
            /** @default null */
            eindeGeldigheid: string | null;
            /** @default null */
            beginObject: string | null;
            /** @default null */
            eindeObject: string | null;
        };
        /**
         * Sjabloon[OptionalExpandableZaakTypeRequest]
         * @description Een SJABLOON
         */
        Sjabloon_OptionalExpandableZaakTypeRequest_: {
            /**
             * @description Korte titel van het sjabloon
             * @example Aanvraag met besluit
             * @example Burgerzaken proces
             * @example Productverstrekking
             */
            naam: string;
            /**
             * @description Beknopte omschrijving van het sjabloon
             * @example Voor processen waarbij een burger of bedrijf iets aanvraagt en daar een formeel besluit of volgt.
             * @example Voor veelvoorkomende balie- of burgerprocessen.
             * @example Voor het aanvragen en uitgeven van een fysiek product.
             */
            omschrijving: string;
            /**
             * @description Voorbeelden van toepassingen
             * @example [
             *       "parkeervergunning",
             *       "evenementenvergunning"
             *     ]
             * @example [
             *       "adreswijziging",
             *       "uittreksel BRP",
             *       "reisdocument aanvragen"
             *     ]
             * @example [
             *       "afvalpas",
             *       "milieupas",
             *       "GFT-bak",
             *       "pas voor buurtcontainer"
             *     ]
             */
            voorbeelden: string[];
            /** @description De vooringevulde waarden */
            waarden: components["schemas"]["OptionalExpandableZaakTypeRequest"];
            /** Format: uuid */
            uuid?: string;
        };
        /**
         * Status
         * @enum {unknown}
         */
        Status: "alles" | "concept" | "definitief";
        /** StatusType */
        StatusType: {
            /** @description Een korte, voor de initiator van de zaak relevante, omschrijving van de aard van de STATUS van zaken van een ZAAKTYPE. */
            omschrijving: string;
            /** @description URL-referentie naar het ZAAKTYPE van ZAAKen waarin STATUSsen van dit STATUSTYPE bereikt kunnen worden. */
            zaaktype: string;
            /** @description Een volgnummer voor statussen van het STATUSTYPE binnen een zaak. */
            volgnummer: number;
            /** @default null */
            url: string | null;
            /** @default null */
            omschrijvingGeneriek: string | null;
            /** @default null */
            statustekst: string | null;
            /** @default null */
            zaaktypeIdentificatie: string | null;
            /** @default null */
            isEindstatus: boolean | null;
            /** @default null */
            informeren: boolean | null;
            /** @default null */
            doorlooptijd: string | null;
            /** @default null */
            toelichting: string | null;
            /** @default null */
            checklistitemStatustype: components["schemas"]["CheckListItem"][] | null;
            /** @default null */
            catalogus: string | null;
            /** @default null */
            eigenschappen: string[] | null;
            /** @default null */
            zaakobjecttypen: string[] | null;
            /** @default null */
            beginGeldigheid: string | null;
            /** @default null */
            eindeGeldigheid: string | null;
            /** @default null */
            beginObject: string | null;
            /** @default null */
            eindeObject: string | null;
        };
        /** StatusTypeRequest */
        StatusTypeRequest: {
            /** @description Een korte, voor de initiator van de zaak relevante, omschrijving van de aard van de STATUS van zaken van een ZAAKTYPE. */
            omschrijving: string;
            /** @description URL-referentie naar het ZAAKTYPE van ZAAKen waarin STATUSsen van dit STATUSTYPE bereikt kunnen worden. */
            zaaktype: string;
            /** @description Een volgnummer voor statussen van het STATUSTYPE binnen een zaak. */
            volgnummer: number;
            /** @default null */
            omschrijvingGeneriek: string | null;
            /** @default null */
            statustekst: string | null;
            /** @default null */
            informeren: boolean | null;
            /** @default null */
            doorlooptijd: string | null;
            /** @default null */
            toelichting: string | null;
            /** @default null */
            checklistitemStatustype: components["schemas"]["CheckListItemRequest"][] | null;
            /** @default null */
            beginGeldigheid: string | null;
            /** @default null */
            eindeGeldigheid: string | null;
        };
        /** StatusTypeWithUUID */
        StatusTypeWithUUID: {
            /** Format: uuid */
            uuid?: string;
            /** @description Een korte, voor de initiator van de zaak relevante, omschrijving van de aard van de STATUS van zaken van een ZAAKTYPE. */
            omschrijving: string;
            /** @description URL-referentie naar het ZAAKTYPE van ZAAKen waarin STATUSsen van dit STATUSTYPE bereikt kunnen worden. */
            zaaktype: string;
            /** @description Een volgnummer voor statussen van het STATUSTYPE binnen een zaak. */
            volgnummer: number;
            /** @default null */
            url: string | null;
            /** @default null */
            omschrijvingGeneriek: string | null;
            /** @default null */
            statustekst: string | null;
            /** @default null */
            zaaktypeIdentificatie: string | null;
            /** @default null */
            isEindstatus: boolean | null;
            /** @default null */
            informeren: boolean | null;
            /** @default null */
            doorlooptijd: string | null;
            /** @default null */
            toelichting: string | null;
            /** @default null */
            checklistitemStatustype: components["schemas"]["CheckListItem"][] | null;
            /** @default null */
            catalogus: string | null;
            /** @default null */
            eigenschappen: string[] | null;
            /** @default null */
            zaakobjecttypen: string[] | null;
            /** @default null */
            beginGeldigheid: string | null;
            /** @default null */
            eindeGeldigheid: string | null;
            /** @default null */
            beginObject: string | null;
            /** @default null */
            eindeObject: string | null;
        };
        /**
         * UpdateFrequencyEnum
         * @enum {unknown}
         */
        UpdateFrequencyEnum: "daily" | "hourly" | "monthly" | "real_time" | "unknown" | "weekly" | "yearly";
        User: {
            /** ID */
            readonly pk: number;
            /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
            username: string;
            firstName?: string;
            lastName?: string;
            /**
             * Email address
             * Format: email
             */
            email?: string;
        };
        /**
         * VersionSummary
         * @description Summary of the different version of a ZTC resource.
         *
         *         # TODO: what do we need to show per version?
         */
        VersionSummary: {
            uuid: string;
            /** Format: date */
            beginGeldigheid: string;
            eindeGeldigheid: string | null;
            concept: boolean | null;
        };
        /**
         * VertrouwelijkheidaanduidingEnum
         * @enum {unknown}
         */
        VertrouwelijkheidaanduidingEnum: "beperkt_openbaar" | "confidentieel" | "geheim" | "intern" | "openbaar" | "vertrouwelijk" | "zaakvertrouwelijk" | "zeer_geheim";
        /** ZGWError */
        ZGWError: {
            /** @description Systeemcode die het type fout aangeeft */
            code: string;
            /** @description Generieke titel voor het type fout */
            title: string;
            /** @description De HTTP status code */
            status: number;
            /** @description Extra informatie bij de fout, indien beschikbaar */
            detail: string;
            /** @description URI met referentie naar dit specifiek voorkomen van de fout. Deze kan gebruikt worden in combinatie met server logs, bijvoorbeeld. */
            instance: string;
            invalidParams?: components["schemas"]["InvalidParam"][];
            /** @default null */
            type: string | null;
        };
        /** ZGWResponse[Sjabloon[OptionalExpandableZaakTypeRequest]] */
        ZGWResponse_Sjabloon_OptionalExpandableZaakTypeRequest_: {
            count: number;
            next: string | null;
            previous: string | null;
            results: components["schemas"]["Sjabloon_OptionalExpandableZaakTypeRequest_"][];
        };
        /** ZaakObjectType */
        ZaakObjectType: {
            /** @description Aanduiding waarmee wordt aangegeven of het ZAAKOBJECTTYPE een ander, niet in RSGB en RGBZ voorkomend, objecttype betreft. */
            anderObjecttype: boolean;
            /** @description URL-referentie naar de OBJECTTYPE waartoe dit ZAAKOBJECTTYPE behoort. */
            objecttype: string;
            /** @description Omschrijving van de betrekking van het Objecttype op zaken van het gerelateerde ZAAKTYPE. */
            relatieOmschrijving: string;
            /** @description URL-referentie naar de ZAAKTYPE waartoe dit ZAAKOBJECTTYPE behoort. */
            zaaktype: string;
            /** @default null */
            url: string | null;
            /** @default null */
            zaaktypeIdentificatie: string | null;
            /** @default null */
            resultaattypen: string[] | null;
            /** @default null */
            statustype: string | null;
            /** @default null */
            catalogus: string | null;
            /** @default null */
            beginGeldigheid: string | null;
            /** @default null */
            eindeGeldigheid: string | null;
            /** @default null */
            beginObject: string | null;
            /** @default null */
            eindeObject: string | null;
        };
        /** ZaakObjectTypeExtension */
        ZaakObjectTypeExtension: {
            objecttype?: components["schemas"]["ObjectType"];
        };
        /** ZaakObjectTypeRequest */
        ZaakObjectTypeRequest: {
            /** @description Aanduiding waarmee wordt aangegeven of het ZAAKOBJECTTYPE een ander, niet in RSGB en RGBZ voorkomend, objecttype betreft. */
            anderObjecttype: boolean;
            /** @description URL-referentie naar de OBJECTTYPE waartoe dit ZAAKOBJECTTYPE behoort. */
            objecttype: string;
            /** @description Omschrijving van de betrekking van het Objecttype op zaken van het gerelateerde ZAAKTYPE. */
            relatieOmschrijving: string;
            /** @description URL-referentie naar de ZAAKTYPE waartoe dit ZAAKOBJECTTYPE behoort. */
            zaaktype: string;
            /** @default null */
            statustype: string | null;
            /** @default null */
            beginGeldigheid: string | null;
            /** @default null */
            eindeGeldigheid: string | null;
        };
        /** ZaakObjectTypeWithUUID */
        ZaakObjectTypeWithUUID: {
            /** Format: uuid */
            uuid?: string;
            /** @description Aanduiding waarmee wordt aangegeven of het ZAAKOBJECTTYPE een ander, niet in RSGB en RGBZ voorkomend, objecttype betreft. */
            anderObjecttype: boolean;
            /** @description URL-referentie naar de OBJECTTYPE waartoe dit ZAAKOBJECTTYPE behoort. */
            objecttype: string;
            /** @description Omschrijving van de betrekking van het Objecttype op zaken van het gerelateerde ZAAKTYPE. */
            relatieOmschrijving: string;
            /** @description URL-referentie naar de ZAAKTYPE waartoe dit ZAAKOBJECTTYPE behoort. */
            zaaktype: string;
            /** @default null */
            url: string | null;
            /** @default null */
            zaaktypeIdentificatie: string | null;
            /** @default null */
            resultaattypen: string[] | null;
            /** @default null */
            statustype: string | null;
            /** @default null */
            catalogus: string | null;
            /** @default null */
            beginGeldigheid: string | null;
            /** @default null */
            eindeGeldigheid: string | null;
            /** @default null */
            beginObject: string | null;
            /** @default null */
            eindeObject: string | null;
        };
        /** ZaakTypeExtension */
        ZaakTypeExtension: {
            besluittypen?: components["schemas"]["BesluitTypeWithUUID"][];
            statustypen?: components["schemas"]["StatusTypeWithUUID"][];
            resultaattypen?: components["schemas"]["ResultaatTypeWithUUID"][];
            eigenschappen?: components["schemas"]["EigenschapWithUUID"][];
            informatieobjecttypen?: components["schemas"]["InformatieObjectTypeWithUUID"][];
            roltypen?: components["schemas"]["RolTypeWithUUID"][];
            deelzaaktypen?: components["schemas"]["ZaakTypeWithUUID"][];
            zaakobjecttypen?: components["schemas"]["ExpandableZaakObjectTypeWithUUID"][];
            selectielijstProcestype?: components["schemas"]["LAXProcesType"];
            zaaktypeinformatieobjecttypen?: components["schemas"]["ZaakTypeInformatieObjectTypeWithUUID"][];
        };
        /** ZaakTypeInformatieObjectType */
        ZaakTypeInformatieObjectType: {
            /** @description URL-referentie naar het ZAAKTYPE. */
            zaaktype: string;
            /**
             * Informatie object type
             * @description URL-referentie naar het INFORMATIEOBJECTTYPE.
             */
            informatieobjecttype: string;
            /** @description Uniek volgnummer van het ZAAK-INFORMATIEOBJECTTYPE binnen het ZAAKTYPE. */
            volgnummer: number;
            /** @description Aanduiding van de richting van informatieobjecten van het gerelateerde INFORMATIEOBJECTTYPE bij zaken van het gerelateerde ZAAKTYPE.
             *
             *     Uitleg bij mogelijke waarden:
             *
             *     * `inkomend` - Inkomend
             *     * `intern` - Intern
             *     * `uitgaand` - Uitgaand */
            richting: components["schemas"]["RichtingEnum"];
            /** @default null */
            url: string | null;
            /** @default null */
            zaaktypeIdentificatie: string | null;
            /** @default null */
            statustype: string | null;
            /** @default null */
            catalogus: string | null;
        };
        /** ZaakTypeInformatieObjectTypeRequest */
        ZaakTypeInformatieObjectTypeRequest: {
            /** @description URL-referentie naar het ZAAKTYPE. */
            zaaktype: string;
            /**
             * Informatie object type
             * @description URL-referentie naar het INFORMATIEOBJECTTYPE.
             */
            informatieobjecttype: string;
            /** @description Uniek volgnummer van het ZAAK-INFORMATIEOBJECTTYPE binnen het ZAAKTYPE. */
            volgnummer: number;
            /** @description Aanduiding van de richting van informatieobjecten van het gerelateerde INFORMATIEOBJECTTYPE bij zaken van het gerelateerde ZAAKTYPE.
             *
             *     Uitleg bij mogelijke waarden:
             *
             *     * `inkomend` - Inkomend
             *     * `intern` - Intern
             *     * `uitgaand` - Uitgaand */
            richting: components["schemas"]["RichtingEnum"];
            /** @default null */
            statustype: string | null;
        };
        /** ZaakTypeInformatieObjectTypeWithUUID */
        ZaakTypeInformatieObjectTypeWithUUID: {
            /** Format: uuid */
            uuid?: string;
            /** @description URL-referentie naar het ZAAKTYPE. */
            zaaktype: string;
            /**
             * Informatie object type
             * @description URL-referentie naar het INFORMATIEOBJECTTYPE.
             */
            informatieobjecttype: string;
            /** @description Uniek volgnummer van het ZAAK-INFORMATIEOBJECTTYPE binnen het ZAAKTYPE. */
            volgnummer: number;
            /** @description Aanduiding van de richting van informatieobjecten van het gerelateerde INFORMATIEOBJECTTYPE bij zaken van het gerelateerde ZAAKTYPE.
             *
             *     Uitleg bij mogelijke waarden:
             *
             *     * `inkomend` - Inkomend
             *     * `intern` - Intern
             *     * `uitgaand` - Uitgaand */
            richting: components["schemas"]["RichtingEnum"];
            /** @default null */
            url: string | null;
            /** @default null */
            zaaktypeIdentificatie: string | null;
            /** @default null */
            statustype: string | null;
            /** @default null */
            catalogus: string | null;
        };
        /** ZaakTypeRequest */
        ZaakTypeRequest: {
            /** @description Omschrijving van de aard van ZAAKen van het ZAAKTYPE. */
            omschrijving: string;
            /** @description Aanduiding van de mate waarin zaakdossiers van ZAAKen van dit ZAAKTYPE voor de openbaarheid bestemd zijn. Indien de zaak bij het aanmaken geen vertrouwelijkheidaanduiding krijgt, dan wordt deze waarde gezet.
             *
             *     Uitleg bij mogelijke waarden:
             *
             *     * `openbaar` - Openbaar
             *     * `beperkt_openbaar` - Beperkt openbaar
             *     * `intern` - Intern
             *     * `zaakvertrouwelijk` - Zaakvertrouwelijk
             *     * `vertrouwelijk` - Vertrouwelijk
             *     * `confidentieel` - Confidentieel
             *     * `geheim` - Geheim
             *     * `zeer_geheim` - Zeer geheim */
            vertrouwelijkheidaanduiding: components["schemas"]["VertrouwelijkheidaanduidingEnum"];
            /** @description Een omschrijving van hetgeen beoogd is te bereiken met een zaak van dit zaaktype. */
            doel: string;
            /** @description Een omschrijving van de gebeurtenis die leidt tot het starten van een ZAAK van dit ZAAKTYPE. */
            aanleiding: string;
            /** @description Een aanduiding waarmee onderscheid wordt gemaakt tussen ZAAKTYPEn die Intern respectievelijk Extern geïnitieerd worden. Indien van beide sprake kan zijn, dan prevaleert de externe initiatie.
             *
             *     Uitleg bij mogelijke waarden:
             *
             *     * `inkomend` - Inkomend
             *     * `intern` - Intern
             *     * `uitgaand` - Uitgaand */
            indicatieInternOfExtern: components["schemas"]["IndicatieInternOfExternEnum"];
            /** @description Werkwoord dat hoort bij de handeling die de initiator verricht bij dit zaaktype. Meestal 'aanvragen', 'indienen' of 'melden'. Zie ook het IOB model op https://www.gemmaonline.nl/index.php/Imztc_2.1/doc/attribuutsoort/zaaktype.handeling_initiator */
            handelingInitiator: string;
            /** @description Het onderwerp van ZAAKen van dit ZAAKTYPE. In veel gevallen nauw gerelateerd aan de product- of dienstnaam uit de Producten- en Dienstencatalogus (PDC). Bijvoorbeeld: 'Evenementenvergunning', 'Geboorte', 'Klacht'. Zie ook het IOB model op https://www.gemmaonline.nl/index.php/Imztc_2.1/doc/attribuutsoort/zaaktype.onderwerp */
            onderwerp: string;
            /** @description Werkwoord dat hoort bij de handeling die de behandelaar verricht bij het afdoen van ZAAKen van dit ZAAKTYPE. Meestal 'behandelen', 'uitvoeren', 'vaststellen' of 'onderhouden'. Zie ook het IOB model op https://www.gemmaonline.nl/index.php/Imztc_2.1/doc/attribuutsoort/zaaktype.handeling_behandelaar */
            handelingBehandelaar: string;
            /** @description De periode waarbinnen volgens wet- en regelgeving een ZAAK van het ZAAKTYPE afgerond dient te zijn, in kalenderdagen. */
            doorlooptijd: string;
            /**
             * Opschorting/aanhouding mogelijk
             * @description Aanduiding die aangeeft of ZAAKen van dit mogelijk ZAAKTYPE kunnen worden opgeschort en/of aangehouden.
             */
            opschortingEnAanhoudingMogelijk: boolean;
            /** @description Aanduiding die aangeeft of de Doorlooptijd behandeling van ZAAKen van dit ZAAKTYPE kan worden verlengd. */
            verlengingMogelijk: boolean;
            /** @description Aanduiding of (het starten van) een ZAAK dit ZAAKTYPE gepubliceerd moet worden. */
            publicatieIndicatie: boolean;
            /** @description Het product of de dienst die door ZAAKen van dit ZAAKTYPE wordt voortgebracht. */
            productenOfDiensten: string[];
            /** @description Het Referentieproces dat ten grondslag ligt aan dit ZAAKTYPE. */
            referentieproces: components["schemas"]["ReferentieProcesRequest"];
            /** @description De (soort) organisatorische eenheid of (functie van) medewerker die verantwoordelijk is voor de uitvoering van zaken van het ZAAKTYPE. */
            verantwoordelijke: string;
            /**
             * Format: date
             * @description De datum waarop het is ontstaan.
             */
            beginGeldigheid: string;
            /**
             * Format: date
             * @description De datum waarop de (gewijzigde) kenmerken van het ZAAKTYPE geldig zijn geworden
             */
            versiedatum: string;
            /** @description URL-referentie naar de CATALOGUS waartoe dit ZAAKTYPE behoort. */
            catalogus: string;
            /**
             * heeft relevante besluittypen
             * @description URL-referenties naar de BESLUITTYPEN die mogelijk zijn binnen dit ZAAKTYPE.
             */
            besluittypen: string[];
            /** @description De ZAAKTYPEn van zaken die relevant zijn voor zaken van dit ZAAKTYPE. */
            gerelateerdeZaaktypen: components["schemas"]["ZaakTypenRelatieRequest"][];
            /** @default null */
            identificatie: string | null;
            /** @default null */
            omschrijvingGeneriek: string | null;
            /** @default null */
            toelichting: string | null;
            /** @default null */
            servicenorm: string | null;
            /** @default null */
            verlengingstermijn: string | null;
            /** @default null */
            trefwoorden: string[] | null;
            /** @default null */
            publicatietekst: string | null;
            /** @default null */
            verantwoordingsrelatie: string[] | null;
            /** @default null */
            selectielijstProcestype: string | null;
            /** @default null */
            broncatalogus: null | components["schemas"]["BronCatalogusRequest"];
            /** @default null */
            bronzaaktype: null | components["schemas"]["BronZaaktypeRequest"];
            /** @default null */
            eindeGeldigheid: string | null;
            /** @default null */
            deelzaaktypen: (string | null)[] | null;
        };
        /** ZaakTypeSummary */
        ZaakTypeSummary: {
            actief?: boolean;
            /** @default null */
            eindeGeldigheid: string | null;
            concept?: boolean;
            url: string;
            identificatie: string;
            omschrijving: string;
            vertrouwelijkheidaanduiding: string;
            /** Format: date */
            versiedatum: string;
        };
        /** ZaakTypeWithUUID */
        ZaakTypeWithUUID: {
            /** @default null */
            selectielijstProcestype: string | null;
            /** Format: uuid */
            uuid?: string;
            /** @description Omschrijving van de aard van ZAAKen van het ZAAKTYPE. */
            omschrijving: string;
            /** @description Aanduiding van de mate waarin zaakdossiers van ZAAKen van dit ZAAKTYPE voor de openbaarheid bestemd zijn. Indien de zaak bij het aanmaken geen vertrouwelijkheidaanduiding krijgt, dan wordt deze waarde gezet.
             *
             *     Uitleg bij mogelijke waarden:
             *
             *     * `openbaar` - Openbaar
             *     * `beperkt_openbaar` - Beperkt openbaar
             *     * `intern` - Intern
             *     * `zaakvertrouwelijk` - Zaakvertrouwelijk
             *     * `vertrouwelijk` - Vertrouwelijk
             *     * `confidentieel` - Confidentieel
             *     * `geheim` - Geheim
             *     * `zeer_geheim` - Zeer geheim */
            vertrouwelijkheidaanduiding: components["schemas"]["VertrouwelijkheidaanduidingEnum"];
            /** @description Een omschrijving van hetgeen beoogd is te bereiken met een zaak van dit zaaktype. */
            doel: string;
            /** @description Een omschrijving van de gebeurtenis die leidt tot het starten van een ZAAK van dit ZAAKTYPE. */
            aanleiding: string;
            /** @description Een aanduiding waarmee onderscheid wordt gemaakt tussen ZAAKTYPEn die Intern respectievelijk Extern geïnitieerd worden. Indien van beide sprake kan zijn, dan prevaleert de externe initiatie.
             *
             *     Uitleg bij mogelijke waarden:
             *
             *     * `inkomend` - Inkomend
             *     * `intern` - Intern
             *     * `uitgaand` - Uitgaand */
            indicatieInternOfExtern: components["schemas"]["IndicatieInternOfExternEnum"];
            /** @description Werkwoord dat hoort bij de handeling die de initiator verricht bij dit zaaktype. Meestal 'aanvragen', 'indienen' of 'melden'. Zie ook het IOB model op https://www.gemmaonline.nl/index.php/Imztc_2.1/doc/attribuutsoort/zaaktype.handeling_initiator */
            handelingInitiator: string;
            /** @description Het onderwerp van ZAAKen van dit ZAAKTYPE. In veel gevallen nauw gerelateerd aan de product- of dienstnaam uit de Producten- en Dienstencatalogus (PDC). Bijvoorbeeld: 'Evenementenvergunning', 'Geboorte', 'Klacht'. Zie ook het IOB model op https://www.gemmaonline.nl/index.php/Imztc_2.1/doc/attribuutsoort/zaaktype.onderwerp */
            onderwerp: string;
            /** @description Werkwoord dat hoort bij de handeling die de behandelaar verricht bij het afdoen van ZAAKen van dit ZAAKTYPE. Meestal 'behandelen', 'uitvoeren', 'vaststellen' of 'onderhouden'. Zie ook het IOB model op https://www.gemmaonline.nl/index.php/Imztc_2.1/doc/attribuutsoort/zaaktype.handeling_behandelaar */
            handelingBehandelaar: string;
            /** @description De periode waarbinnen volgens wet- en regelgeving een ZAAK van het ZAAKTYPE afgerond dient te zijn, in kalenderdagen. */
            doorlooptijd: string;
            /**
             * Opschorting/aanhouding mogelijk
             * @description Aanduiding die aangeeft of ZAAKen van dit mogelijk ZAAKTYPE kunnen worden opgeschort en/of aangehouden.
             */
            opschortingEnAanhoudingMogelijk: boolean;
            /** @description Aanduiding die aangeeft of de Doorlooptijd behandeling van ZAAKen van dit ZAAKTYPE kan worden verlengd. */
            verlengingMogelijk: boolean;
            /** @description Aanduiding of (het starten van) een ZAAK dit ZAAKTYPE gepubliceerd moet worden. */
            publicatieIndicatie: boolean;
            /** @description Het product of de dienst die door ZAAKen van dit ZAAKTYPE wordt voortgebracht. */
            productenOfDiensten: string[];
            /** @description Het Referentieproces dat ten grondslag ligt aan dit ZAAKTYPE. */
            referentieproces: components["schemas"]["ReferentieProces"];
            /** @description De (soort) organisatorische eenheid of (functie van) medewerker die verantwoordelijk is voor de uitvoering van zaken van het ZAAKTYPE. */
            verantwoordelijke: string;
            /**
             * Format: date
             * @description De datum waarop het is ontstaan.
             */
            beginGeldigheid: string;
            /**
             * Format: date
             * @description De datum waarop de (gewijzigde) kenmerken van het ZAAKTYPE geldig zijn geworden
             */
            versiedatum: string;
            /** @description URL-referentie naar de CATALOGUS waartoe dit ZAAKTYPE behoort. */
            catalogus: string;
            /**
             * heeft relevante besluittypen
             * @description URL-referenties naar de BESLUITTYPEN die mogelijk zijn binnen dit ZAAKTYPE.
             */
            besluittypen: string[];
            /** @description De ZAAKTYPEn van zaken die relevant zijn voor zaken van dit ZAAKTYPE. */
            gerelateerdeZaaktypen: components["schemas"]["ZaakTypenRelatie"][];
            /** @default null */
            url: string | null;
            /** @default null */
            identificatie: string | null;
            /** @default null */
            omschrijvingGeneriek: string | null;
            /** @default null */
            toelichting: string | null;
            /** @default null */
            servicenorm: string | null;
            /** @default null */
            verlengingstermijn: string | null;
            /** @default null */
            trefwoorden: string[] | null;
            /** @default null */
            publicatietekst: string | null;
            /** @default null */
            verantwoordingsrelatie: string[] | null;
            /** @default null */
            concept: boolean | null;
            /** @default null */
            broncatalogus: null | components["schemas"]["BronCatalogus"];
            /** @default null */
            bronzaaktype: null | components["schemas"]["BronZaaktype"];
            /** @default null */
            eindeGeldigheid: string | null;
            /** @default null */
            beginObject: string | null;
            /** @default null */
            eindeObject: string | null;
            /** @default null */
            statustypen: string[] | null;
            /** @default null */
            resultaattypen: string[] | null;
            /** @default null */
            eigenschappen: string[] | null;
            /** @default null */
            informatieobjecttypen: string[] | null;
            /** @default null */
            roltypen: string[] | null;
            /** @default null */
            deelzaaktypen: (string | null)[] | null;
            /** @default null */
            zaakobjecttypen: string[] | null;
        };
        /** ZaakTypenRelatie */
        ZaakTypenRelatie: {
            /** @description URL referentie naar het gerelateerde zaaktype, mogelijks in een extern ZTC. */
            zaaktype: string;
            /** @description Omschrijving van de aard van de relatie van zaken van het ZAAKTYPE tot zaken van het andere ZAAKTYPE
             *
             *     Uitleg bij mogelijke waarden:
             *
             *     * `vervolg` - Vervolg
             *     * `bijdrage` - Bijdrage
             *     * `onderwerp` - Onderwerp */
            aardRelatie: components["schemas"]["AardRelatieEnum"];
            /** @default null */
            toelichting: string | null;
        };
        /** ZaakTypenRelatieRequest */
        ZaakTypenRelatieRequest: {
            /** @description URL referentie naar het gerelateerde zaaktype, mogelijks in een extern ZTC. */
            zaaktype: string;
            /** @description Omschrijving van de aard van de relatie van zaken van het ZAAKTYPE tot zaken van het andere ZAAKTYPE
             *
             *     Uitleg bij mogelijke waarden:
             *
             *     * `vervolg` - Vervolg
             *     * `bijdrage` - Bijdrage
             *     * `onderwerp` - Onderwerp */
            aardRelatie: components["schemas"]["AardRelatieEnum"];
            /** @default null */
            toelichting: string | null;
        };
        list_HealthCheckSerialisedResult_: components["schemas"]["HealthCheckSerialisedResult"][];
        list_OBOption_str_: components["schemas"]["OBOption_str_"][];
        list_ZGWError_: components["schemas"]["ZGWError"][];
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    auth_ensure_csrf_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    auth_login_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Auth"];
                "application/x-www-form-urlencoded": components["schemas"]["Auth"];
                "multipart/form-data": components["schemas"]["Auth"];
            };
        };
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    auth_logout_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    health_checks_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["list_HealthCheckSerialisedResult_"];
                };
            };
        };
    };
    oidc_info_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OIDCInfo"];
                };
            };
        };
    };
    service_catalogi_choices_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["list_OBOption_str_"];
                };
            };
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExternalServiceError"];
                };
            };
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExternalServiceError"];
                };
            };
        };
    };
    service_informatieobjecttypen_retrieve: {
        parameters: {
            query?: {
                catalogus?: string;
                datumGeldigheid?: string;
                identificatie?: string;
                page?: number;
                status?: "alles" | "concept" | "definitief";
                trefwoorden?: string;
                zaaktype?: string;
            };
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OBList_InformatieObjectTypeSummary_"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExternalServiceError"];
                };
            };
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExternalServiceError"];
                };
            };
        };
    };
    service_informatieobjecttypen_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InformatieObjectTypeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["InformatieObjectTypeRequest"];
                "multipart/form-data": components["schemas"]["InformatieObjectTypeRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InformatieObjectType"];
                };
            };
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExternalServiceError"];
                };
            };
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExternalServiceError"];
                };
            };
        };
    };
    service_informatieobjecttypen_retrieve_one: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DetailResponseWithoutVersions_InformatieObjectType_"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
        };
    };
    service_informatieobjecttypen_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InformatieObjectTypeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["InformatieObjectTypeRequest"];
                "multipart/form-data": components["schemas"]["InformatieObjectTypeRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DetailResponseWithoutVersions_InformatieObjectType_"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
        };
    };
    service_informatieobjecttypen_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
        };
    };
    service_informatieobjecttypen_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPatchedInformatieObjectTypeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedPatchedInformatieObjectTypeRequest"];
                "multipart/form-data": components["schemas"]["PatchedPatchedInformatieObjectTypeRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DetailResponseWithoutVersions_InformatieObjectType_"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
        };
    };
    informatieobjecttype_publish: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
        };
    };
    service_zaaktypen_retrieve: {
        parameters: {
            query?: {
                catalogus?: string;
                datumGeldigheid?: string;
                identificatie?: string;
                identificatie__icontains?: string;
                omschrijving__icontains?: string;
                page?: number;
                status?: "alles" | "concept" | "definitief";
                trefwoorden?: string;
            };
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OBList_ZaakTypeSummary_"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExternalServiceError"];
                };
            };
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExternalServiceError"];
                };
            };
        };
    };
    service_zaaktypen_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExpandableZaakTypeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ExpandableZaakTypeRequest"];
                "multipart/form-data": components["schemas"]["ExpandableZaakTypeRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExpandableZaakType"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["list_ZGWError_"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["list_ZGWError_"];
                };
            };
        };
    };
    service_zaaktype_retrieve_one: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DetailResponse_ExpandableZaakType_"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
        };
    };
    service_zaaktypen_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ZaakTypeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ZaakTypeRequest"];
                "multipart/form-data": components["schemas"]["ZaakTypeRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DetailResponse_ExpandableZaakType_"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
        };
    };
    service_zaaktypen_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
        };
    };
    service_zaaktypen_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPatchedZaakTypeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedPatchedZaakTypeRequest"];
                "multipart/form-data": components["schemas"]["PatchedPatchedZaakTypeRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DetailResponse_ExpandableZaakType_"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
        };
    };
    service_zaaktypen_publish: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
        };
    };
    service_zaaktypen_besluittypen_retrieve: {
        parameters: {
            query?: {
                datumGeldigheid?: string;
                informatieobjecttypen?: string | null;
                omschrijving?: string | null;
                page?: number;
                status?: "alles" | "concept" | "definitief";
                zaaktypen?: string;
            };
            header?: never;
            path: {
                slug: string;
                zaaktype: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OBList_BesluitTypeWithUUID_"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExternalServiceError"];
                };
            };
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExternalServiceError"];
                };
            };
        };
    };
    service_zaaktypen_besluittypen_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                zaaktype: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BesluitTypeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["BesluitTypeRequest"];
                "multipart/form-data": components["schemas"]["BesluitTypeRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BesluitType"];
                };
            };
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExternalServiceError"];
                };
            };
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExternalServiceError"];
                };
            };
        };
    };
    service_besluittypen_retrieve_one: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                uuid: string;
                zaaktype: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BesluitType"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
        };
    };
    service_zaaktypen_besluittypen_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                uuid: string;
                zaaktype: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BesluitTypeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["BesluitTypeRequest"];
                "multipart/form-data": components["schemas"]["BesluitTypeRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BesluitType"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
        };
    };
    service_zaaktypen_besluittypen_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                uuid: string;
                zaaktype: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
        };
    };
    service_zaaktypen_besluittypen_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                uuid: string;
                zaaktype: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPatchedBesluitTypeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedPatchedBesluitTypeRequest"];
                "multipart/form-data": components["schemas"]["PatchedPatchedBesluitTypeRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BesluitType"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
        };
    };
    service_zaaktypen_eigenschappen_retrieve: {
        parameters: {
            query?: {
                datumGeldigheid?: string;
                page?: number;
                status?: "alles" | "concept" | "definitief";
                zaaktype?: string;
                zaaktypeIdentificatie?: string;
            };
            header?: never;
            path: {
                slug: string;
                zaaktype: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OBList_EigenschapWithUUID_"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExternalServiceError"];
                };
            };
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExternalServiceError"];
                };
            };
        };
    };
    service_zaaktypen_eigenschappen_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                zaaktype: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EigenschapRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["EigenschapRequest"];
                "multipart/form-data": components["schemas"]["EigenschapRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Eigenschap"];
                };
            };
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExternalServiceError"];
                };
            };
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExternalServiceError"];
                };
            };
        };
    };
    service_eigenschappen_retrieve_one: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                uuid: string;
                zaaktype: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Eigenschap"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
        };
    };
    service_zaaktypen_eigenschappen_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                uuid: string;
                zaaktype: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EigenschapRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["EigenschapRequest"];
                "multipart/form-data": components["schemas"]["EigenschapRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Eigenschap"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
        };
    };
    service_zaaktypen_eigenschappen_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                uuid: string;
                zaaktype: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
        };
    };
    service_zaaktypen_eigenschappen_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                uuid: string;
                zaaktype: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPatchedEigenschapRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedPatchedEigenschapRequest"];
                "multipart/form-data": components["schemas"]["PatchedPatchedEigenschapRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Eigenschap"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
        };
    };
    service_zaaktypen_resultaattypen_retrieve: {
        parameters: {
            query?: {
                datumGeldigheid?: string;
                page?: number;
                status?: "alles" | "concept" | "definitief";
                zaaktype?: string;
                zaaktypeIdentificatie?: string;
            };
            header?: never;
            path: {
                slug: string;
                zaaktype: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OBList_ResultaatTypeWithUUID_"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExternalServiceError"];
                };
            };
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExternalServiceError"];
                };
            };
        };
    };
    service_zaaktypen_resultaattypen_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                zaaktype: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResultaatTypeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ResultaatTypeRequest"];
                "multipart/form-data": components["schemas"]["ResultaatTypeRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultaatType"];
                };
            };
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExternalServiceError"];
                };
            };
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExternalServiceError"];
                };
            };
        };
    };
    service_resultaattypen_retrieve_one: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                uuid: string;
                zaaktype: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultaatType"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
        };
    };
    service_zaaktypen_resultaattypen_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                uuid: string;
                zaaktype: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResultaatTypeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ResultaatTypeRequest"];
                "multipart/form-data": components["schemas"]["ResultaatTypeRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultaatType"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
        };
    };
    service_zaaktypen_resultaattypen_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                uuid: string;
                zaaktype: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
        };
    };
    service_zaaktypen_resultaattypen_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                uuid: string;
                zaaktype: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPatchedResultaatTypeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedPatchedResultaatTypeRequest"];
                "multipart/form-data": components["schemas"]["PatchedPatchedResultaatTypeRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultaatType"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
        };
    };
    service_zaaktypen_roltypen_retrieve: {
        parameters: {
            query?: {
                datumGeldigheid?: string;
                omschrijving?: string | null;
                omschrijvingGeneriek?: components["schemas"]["OmschrijvingGeneriek4"];
                page?: number;
                status?: "alles" | "concept" | "definitief";
                zaaktype?: string;
                zaaktypeIdentificatie?: string;
            };
            header?: never;
            path: {
                slug: string;
                zaaktype: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OBList_RolTypeWithUUID_"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExternalServiceError"];
                };
            };
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExternalServiceError"];
                };
            };
        };
    };
    service_zaaktypen_roltypen_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                zaaktype: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RolTypeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["RolTypeRequest"];
                "multipart/form-data": components["schemas"]["RolTypeRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RolType"];
                };
            };
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExternalServiceError"];
                };
            };
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExternalServiceError"];
                };
            };
        };
    };
    service_roltypen_retrieve_one: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                uuid: string;
                zaaktype: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RolType"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
        };
    };
    service_zaaktypen_roltypen_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                uuid: string;
                zaaktype: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RolTypeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["RolTypeRequest"];
                "multipart/form-data": components["schemas"]["RolTypeRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RolType"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
        };
    };
    service_zaaktypen_roltypen_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                uuid: string;
                zaaktype: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
        };
    };
    service_zaaktypen_roltypen_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                uuid: string;
                zaaktype: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPatchedRolTypeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedPatchedRolTypeRequest"];
                "multipart/form-data": components["schemas"]["PatchedPatchedRolTypeRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RolType"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
        };
    };
    service_zaaktypen_statustypen_retrieve: {
        parameters: {
            query?: {
                datumGeldigheid?: string;
                page?: number;
                status?: "alles" | "concept" | "definitief";
                zaaktype?: string;
                zaaktypeIdentificatie?: string;
            };
            header?: never;
            path: {
                slug: string;
                zaaktype: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OBList_StatusTypeWithUUID_"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExternalServiceError"];
                };
            };
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExternalServiceError"];
                };
            };
        };
    };
    service_zaaktypen_statustypen_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                zaaktype: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StatusTypeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["StatusTypeRequest"];
                "multipart/form-data": components["schemas"]["StatusTypeRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatusType"];
                };
            };
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExternalServiceError"];
                };
            };
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExternalServiceError"];
                };
            };
        };
    };
    service_statustypen_retrieve_one: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                uuid: string;
                zaaktype: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatusType"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
        };
    };
    service_zaaktypen_statustypen_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                uuid: string;
                zaaktype: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StatusTypeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["StatusTypeRequest"];
                "multipart/form-data": components["schemas"]["StatusTypeRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatusType"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
        };
    };
    service_zaaktypen_statustypen_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                uuid: string;
                zaaktype: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
        };
    };
    service_zaaktypen_statustypen_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                uuid: string;
                zaaktype: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPatchedStatusTypeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedPatchedStatusTypeRequest"];
                "multipart/form-data": components["schemas"]["PatchedPatchedStatusTypeRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatusType"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
        };
    };
    service_zaaktypen_zaakobjecttypen_retrieve: {
        parameters: {
            query?: {
                anderObjecttype?: boolean;
                catalogus?: string;
                datumBeginGeldigheid?: string;
                datumEindeGeldigheid?: string;
                datumGeldigheid?: string;
                objecttype?: string | null;
                page?: number;
                relatieOmschrijving?: string;
                zaaktype?: string;
                zaaktypeIdentificatie?: string;
            };
            header?: never;
            path: {
                slug: string;
                zaaktype: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OBList_ZaakObjectTypeWithUUID_"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExternalServiceError"];
                };
            };
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExternalServiceError"];
                };
            };
        };
    };
    service_zaaktypen_zaakobjecttypen_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                zaaktype: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ZaakObjectTypeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ZaakObjectTypeRequest"];
                "multipart/form-data": components["schemas"]["ZaakObjectTypeRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZaakObjectType"];
                };
            };
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExternalServiceError"];
                };
            };
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExternalServiceError"];
                };
            };
        };
    };
    service_zaakobjecttypen_retrieve_one: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                uuid: string;
                zaaktype: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZaakObjectType"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
        };
    };
    service_zaaktypen_zaakobjecttypen_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                uuid: string;
                zaaktype: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ZaakObjectTypeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ZaakObjectTypeRequest"];
                "multipart/form-data": components["schemas"]["ZaakObjectTypeRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZaakObjectType"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
        };
    };
    service_zaaktypen_zaakobjecttypen_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                uuid: string;
                zaaktype: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
        };
    };
    service_zaaktypen_zaakobjecttypen_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                uuid: string;
                zaaktype: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPatchedZaakObjectTypeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedPatchedZaakObjectTypeRequest"];
                "multipart/form-data": components["schemas"]["PatchedPatchedZaakObjectTypeRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZaakObjectType"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
        };
    };
    service_zaaktypen_zaaktypeinformatieobjecttypen_retrieve: {
        parameters: {
            query?: {
                informatieobjecttype?: string;
                page?: number;
                richting?: components["schemas"]["Richting"] | null;
                status?: "alles" | "concept" | "definitief";
                zaaktype?: string;
            };
            header?: never;
            path: {
                slug: string;
                zaaktype: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OBList_ZaakTypeInformatieObjectType_"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExternalServiceError"];
                };
            };
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExternalServiceError"];
                };
            };
        };
    };
    service_zaaktypen_zaaktypeinformatieobjecttypen_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                zaaktype: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ZaakTypeInformatieObjectTypeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ZaakTypeInformatieObjectTypeRequest"];
                "multipart/form-data": components["schemas"]["ZaakTypeInformatieObjectTypeRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZaakTypeInformatieObjectType"];
                };
            };
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExternalServiceError"];
                };
            };
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExternalServiceError"];
                };
            };
        };
    };
    service_zaaktypeinformatieobjecttypen_retrieve_one: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                uuid: string;
                zaaktype: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZaakTypeInformatieObjectType"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
        };
    };
    service_zaaktypen_zaaktypeinformatieobjecttypen_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                uuid: string;
                zaaktype: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ZaakTypeInformatieObjectTypeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ZaakTypeInformatieObjectTypeRequest"];
                "multipart/form-data": components["schemas"]["ZaakTypeInformatieObjectTypeRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZaakTypeInformatieObjectType"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
        };
    };
    service_zaaktypen_zaaktypeinformatieobjecttypen_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                uuid: string;
                zaaktype: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
        };
    };
    service_zaaktypen_zaaktypeinformatieobjecttypen_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                uuid: string;
                zaaktype: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPatchedZaakTypeInformatieObjectTypeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedPatchedZaakTypeInformatieObjectTypeRequest"];
                "multipart/form-data": components["schemas"]["PatchedPatchedZaakTypeInformatieObjectTypeRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZaakTypeInformatieObjectType"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWError"];
                };
            };
        };
    };
    service_choices_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["list_OBOption_str_"];
                };
            };
        };
    };
    template_zaaktype_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ZGWResponse_Sjabloon_OptionalExpandableZaakTypeRequest_"];
                };
            };
        };
    };
    template_zaaktype_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Sjabloon_OptionalExpandableZaakTypeRequest_"];
                };
            };
        };
    };
    whoami_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
}
