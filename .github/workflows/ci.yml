name: Run CI

# Run this workflow every time a new commit pushed to your repository
on:
  push:
    branches:
      - main
      - stable/*
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

env:
  IMAGE_NAME: maykinmedia/openbeheer
  DJANGO_SETTINGS_MODULE: openbeheer.conf.ci
  DOCKER_BUILDKIT: '1'

jobs:
  commitlint:
    name: Lint commit messages
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: frontend

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version-file: 'frontend/.nvmrc'

      - name: Install dependencies
        run: npm ci

      - name: Validate current commit (last commit) with commitlint
        if: github.event_name == 'push'
        run: npx commitlint --last --verbose

      - name: Validate PR commits with commitlint
        if: github.event_name == 'pull_request'
        run: npx commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }} --verbose

  frontend-build:
    name: Build frontend
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: frontend

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: 'frontend/.nvmrc'

      - name: Build Javascript
        run: |
          npm ci
          npm run lint
          CI=false npm run build
        env: 
          MYKN_API_URL: "http://localhost:8000"

      - uses: actions/upload-artifact@v4
        with:
          name: build
          path: ${{ github.workspace }}/frontend/dist/
          retention-days: 1
          if-no-files-found: error

  backend-tests:
    name: Run the Django test suite
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: backend

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        # Needed because the postgres container does not provide a healthcheck
        options:
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
          --name postgres
      redis:
        image: redis:6
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v4
      - name: Set up backend environment
        uses: maykinmedia/setup-django-backend@v1.3
        with:
          apt-packages: 'gettext postgresql-client libgdal-dev libyaml-dev gdal-bin'
          python-version: '3.12'
          optimize-postgres: 'yes'
          pg-service: 'postgres'
          setup-node: 'no'
          working-directory: backend

      - name: Run tests
        working-directory: backend
        run: |
          python src/manage.py compilemessages
          python src/manage.py collectstatic --noinput --link
          coverage run src/manage.py test openbeheer
          coverage xml -o coverage.xml
        env:
          DJANGO_SETTINGS_MODULE: openbeheer.conf.ci
          SECRET_KEY: dummy
          DB_USER: postgres
          DB_PASSWORD: ''

      - name: Publish coverage report
        uses: codecov/codecov-action@v3.1.4
        with:
          working-directory: backend
          files: ./coverage.xml
          flags: backend
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  frontend-tests:
    name: Run the Vitest test suite
    needs: frontend-build
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: frontend

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: 'frontend/.nvmrc'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Initialize msw for msw-storybook-addon
        run: npx msw init public/

      - name: Run tests
        run: npm run test:coverage

      - name: Publish coverage report
        uses: codecov/codecov-action@v3.1.4
        with:
          working-directory: frontend/coverage
          files: ./coverage-final.json
          flags: jest
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        
  docs:
   name: Build and check documentation
   runs-on: ubuntu-latest

   steps:
     - uses: actions/checkout@v4
       with:
         path: openbeheer

     - name: Set up backend environment
       uses: maykinmedia/setup-django-backend@v1.3
       with:
         apt-packages: 'gettext postgresql-client'
         python-version: '3.12'
         setup-node: 'no'
         working-directory: openbeheer/backend

     - name: Build and test docs
       run: |
        export PYTHONPATH=$PYTHONPATH:`pwd`/../backend/src
        pytest check_sphinx.py -v --tb=auto
       working-directory: openbeheer/docs

  docker_build:
    name: Build docker image

    uses: ./.github/workflows/build-image.yml
    with:
      image_name: maykinmedia/open-beheer
      image_tag_suffix: ""
      target_env: production
      settings_module: docker

  # docker_push:
  #   needs:
  #     - tests
  #     - docker_build

  #   name: Push Docker image
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push' # Exclude PRs

  #   steps:
  #     - name: Download built image
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: docker-image

  #     - name: Load image
  #       run: |
  #         docker image load -i image.tar

  #     - name: Log into registry
  #       run:
  #         echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u ${{ secrets.DOCKER_USERNAME }}
  #         --password-stdin

  #     - name: Push the Docker image (production)
  #       run: docker push ${{ needs.docker_build.outputs.image_tag }}
